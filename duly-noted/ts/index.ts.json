{"name":"./ts/index.ts","lines":[{"number":0,"longComment":true,"comment":""},{"number":1,"longComment":true,"comment":" # !Index.ts"},{"number":2,"longComment":true,"comment":" @authors/chris"},{"number":3,"longComment":true,"comment":" "},{"number":4,"longComment":true,"comment":" This is the entry file to Duly Noted"},{"number":5,"comment":""},{"number":6,"code":"import {IConfig} from \"./classes/IConfig\";"},{"number":7,"code":"import {ReferenceParser} from \"./modules/referenceParser\";"},{"number":8,"code":"import parseArgs = require(\"minimist\");"},{"number":9,"code":"import _ = require(\"underscore\");"},{"number":10,"code":"import * as path from \"path\";"},{"number":11,"code":"import glob = require(\"glob\");"},{"number":12,"code":"import Q = require(\"q\");"},{"number":13,"code":"import {MarkdownGenerator} from \"./generators/markdownGenerator\";"},{"number":14,"code":"import {HtmlGenerator} from \"./generators/Htmlgenerator\";"},{"number":15,"code":"import log4js = require(\"log4js\");"},{"number":16,"code":"let logger = log4js.getLogger(\"duly-noted::run\");"},{"number":17,"code":""},{"number":18,"code":"export function run () {"},{"number":19,"code":"    logger.info(\"Welcome to Duly Noted.\");"},{"number":20,"code":"    let args = parseArgs(process.argv.slice(2));"},{"number":21,"code":"    let config: IConfig;"},{"number":22,"code":""},{"number":23,"comment":" Parse config file","code":"   "},{"number":24,"code":"     if (args[\"c\"]) {"},{"number":25,"code":"        config = require(args[\"c\"]);"},{"number":26,"code":"     } else {"},{"number":27,"code":"        config = require(process.cwd() + \"/duly-noted.json\");"},{"number":28,"code":"     }"},{"number":29,"code":""},{"number":30,"code":"     let getFiles: Q.IPromise<string[]>[] = [];"},{"number":31,"code":""},{"number":32,"code":"     for (let i = 0; i < config.files.length; i++) {"},{"number":33,"code":"        getFiles.push(getFilesFromGlob(config.files[i]));"},{"number":34,"code":"     }"},{"number":35,"code":""},{"number":36,"code":"     Q.all(getFiles)"},{"number":37,"code":"     .then((results) => {"},{"number":38,"code":"         let files = _.flatten(results);"},{"number":39,"code":"         let referenceParser = new ReferenceParser(config);"},{"number":40,"code":""},{"number":41,"code":"         referenceParser.parse()"},{"number":42,"code":"         .then((response) => {"},{"number":43,"code":"             logger.info(\"parsing complete, beginning export of HTML\");"},{"number":44,"code":"             new HtmlGenerator(config).generate();"},{"number":45,"code":"             new MarkdownGenerator(config).generate(true);"},{"number":46,"code":"         })"},{"number":47,"code":"         .catch( (err: Error) => {"},{"number":48,"code":"             logger.error(err.message + err.stack);"},{"number":49,"code":"         });"},{"number":50,"code":"     });"},{"number":51,"code":"}"},{"number":52,"code":""},{"number":53,"code":"function getFilesFromGlob(globString: string): Q.Promise<string[]> {"},{"number":54,"code":"    return Q.Promise<string[]>((resolve, reject) => {"},{"number":55,"code":"        glob(globString, (err, files: string[]) => {"},{"number":56,"code":"            if (err) reject(err);"},{"number":57,"code":"            resolve(files);"},{"number":58,"code":"        });"},{"number":59,"code":"    });"},{"number":60,"code":"}"}],"type":"typescript"}