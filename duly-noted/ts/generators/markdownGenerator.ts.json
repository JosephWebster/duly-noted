{"name":"./ts/generators/markdownGenerator.ts","lines":[{"number":0,"longComment":true,"comment":" !MarkdownGenerator/main"},{"number":1,"longComment":true,"comment":"# Markdown Generator"},{"number":2,"longComment":true,"comment":" @authors/chris"},{"number":3,"longComment":true,"comment":" @license"},{"number":4,"longComment":true,"comment":""},{"number":5,"longComment":true,"comment":"This is a generator that takes the reference maps produced by"},{"number":6,"longComment":true,"comment":"@ReferenceParser/parse and turns them into nice markdown documentation files."},{"number":7,"longComment":true,"comment":""},{"number":8,"longComment":true,"comment":"Markdown will be saved to the `outputDir` set in `duly-noted.json`"},{"number":9,"longComment":true,"comment":""},{"number":10,"code":""},{"number":11,"code":"import {IReferenceCollection, IAnchor, ITag, ReferenceCollection} from \"../classes/referenceCollection\";"},{"number":12,"code":"import {parseLoc} from \"../modules/referenceParser\";"},{"number":13,"code":"import {IConfig, IExternalReference} from \"../classes/IConfig\";"},{"number":14,"code":"import {readFiles, files} from \"node-dir\";"},{"number":15,"code":"import {IFile, ILine} from \"../classes/IFile\";"},{"number":16,"code":"import XRegExp = require(\"xregexp\");"},{"number":17,"code":"import {writeFileSync, mkdirSync, accessSync, F_OK, unlinkSync, readFileSync} from \"fs\";"},{"number":18,"code":"import mkdirp = require(\"mkdirp\");"},{"number":19,"code":"import * as path from \"path\";"},{"number":20,"code":"import _ = require(\"underscore\");"},{"number":21,"code":"import lineReader = require(\"line-reader\");"},{"number":22,"code":"import Q = require(\"q\");"},{"number":23,"code":""},{"number":24,"code":"import log4js = require(\"log4js\");"},{"number":25,"code":"let logger = log4js.getLogger(\"duly-noted::MarkdownGenerator\");"},{"number":26,"code":""},{"number":27,"code":""},{"number":28,"longComment":true,"comment":""},{"number":29,"longComment":true,"comment":"!interfaces/IMarkdownGenerator"},{"number":30,"longComment":true,"comment":""},{"number":31,"code":"export interface IMarkdownGenerator {"},{"number":32,"code":"    generate(): void;"},{"number":33,"code":"}"},{"number":34,"code":""},{"number":35,"longComment":true,"comment":" !MarkdownGenerator/class"},{"number":36,"longComment":true,"comment":"## Markdown Generator Class"},{"number":37,"longComment":true,"comment":""},{"number":38,"code":"export class MarkdownGenerator implements IMarkdownGenerator {"},{"number":39,"code":"    outputDir: string;"},{"number":40,"code":"    indexFile: string;"},{"number":41,"code":"    externalReferences: IExternalReference[];"},{"number":42,"code":"    anchorRegExp: RegExp;"},{"number":43,"code":"    linkRegExp: RegExp;"},{"number":44,"code":"    referenceCollection: ReferenceCollection;"},{"number":45,"code":"    tags: ITag[] = [];"},{"number":46,"code":"    readme: string;"},{"number":47,"code":"    projectName: string;"},{"number":48,"code":"    outputFiles: string[] = [];"},{"number":49,"code":"    htmlAnchors: boolean;"},{"number":50,"code":"    gitHubHtmlAnchors: boolean;"},{"number":51,"code":""},{"number":52,"longComment":true,"comment":" !MarkdownGenerator/constructor"},{"number":53,"longComment":true,"comment":"### Creates an instance of @MarkdownGenerator/class"},{"number":54,"longComment":true,"comment":""},{"number":55,"code":"    constructor(config: IConfig, logLevel?: string) {"},{"number":56,"code":"        logger.setLevel(logLevel || \"DEBUG\");"},{"number":57,"code":"        this.outputDir = config.outputDir;"},{"number":58,"code":"        this.externalReferences = JSON.parse(readFileSync(path.join(parseLoc, \"externalReferences.json\")).toString());"},{"number":59,"code":"        this.anchorRegExp = new RegExp(config.anchorRegExp);"},{"number":60,"code":"        this.linkRegExp = new RegExp(config.linkRegExp);"},{"number":61,"code":"        this.referenceCollection = new ReferenceCollection(\"\").inflate(JSON.parse(readFileSync(path.join(parseLoc, \"internalReferences.json\")).toString()));"},{"number":62,"code":"        this.tags = this.referenceCollection.getAllTags();"},{"number":63,"code":"        this.readme = config.readme;"},{"number":64,"code":"        this.projectName = config.projectName;"},{"number":65,"code":"        this.indexFile = config.indexFile;"},{"number":66,"code":""},{"number":67,"comment":" For a discussion anchors in markdown see @issue/4","code":"       "},{"number":68,"code":"        this.htmlAnchors = config.markdownGeneratorOptions.htmlAnchors;"},{"number":69,"code":"        this.gitHubHtmlAnchors = config.markdownGeneratorOptions.gitHubHtmlAnchors;"},{"number":70,"code":"    }"},{"number":71,"code":""},{"number":72,"longComment":true,"comment":" !MarkdownGenerator/generate"},{"number":73,"longComment":true,"comment":"## Generate Markdown Docs"},{"number":74,"longComment":true,"comment":"Creates Markdown docs for a set of file maps and reference maps set in @MarkdownGenerator/constructor ."},{"number":75,"longComment":true,"comment":""},{"number":76,"code":"    public generate(): Q.IPromise<{}> {"},{"number":77,"code":"        return Q.Promise((resolve, reject) => {"},{"number":78,"code":"            logger.info(\"Generating Markdown Docs.\");"},{"number":79,"code":"            let that = this;"},{"number":80,"code":"            this.outputFiles = [];"},{"number":81,"code":"            readFiles(parseLoc, {match: /.json$/, exclude: /internalReferences.json|externalReferences.json/, recursive: true}, (err, content, next) => {"},{"number":82,"code":"                that.proccessFile(err, content, next, that.outputDir);"},{"number":83,"code":"            }, (err, files) => {"},{"number":84,"code":"                let readme = \"\";"},{"number":85,"code":"                let i = 1;"},{"number":86,"code":""},{"number":87,"code":"                if (that.readme !== null) {"},{"number":88,"code":"                    lineReader.eachLine(that.readme, (line, last) => {"},{"number":89,"code":"                        let newLine = line;"},{"number":90,"code":"                        newLine = that.replaceLinks(newLine, that.readme, i);"},{"number":91,"code":"                        readme +=  \"\\n\" + newLine;"},{"number":92,"code":"                        i++;"},{"number":93,"code":"                    }, () => {"},{"number":94,"code":"                        that.generateIndexPage(readme);"},{"number":95,"code":"                        resolve(null);"},{"number":96,"code":"                    });"},{"number":97,"code":"                } else {"},{"number":98,"code":"                    that.generateIndexPage(\"\");"},{"number":99,"code":"                    resolve(null);"},{"number":100,"code":"                }"},{"number":101,"code":"            });"},{"number":102,"code":"        });"},{"number":103,"code":"    }"},{"number":104,"code":""},{"number":105,"longComment":true,"comment":" !MarkdownGenerator/processFiles"},{"number":106,"longComment":true,"comment":"## Process Files"},{"number":107,"longComment":true,"comment":"Processes the file map for a file, making output decisions based on "},{"number":108,"longComment":true,"comment":"code, comment, long comment "},{"number":109,"longComment":true,"comment":""},{"number":110,"code":"    proccessFile(err: Error, content: string, next: Function, outputDir: string): void {"},{"number":111,"code":"        let file: IFile = JSON.parse(content);"},{"number":112,"code":"        let that = this;"},{"number":113,"code":"        logger.debug(\"Processing \" + file.name);"},{"number":114,"code":""},{"number":115,"code":"        if (err) {"},{"number":116,"code":"            logger.error(err.message);"},{"number":117,"code":"        } else {"},{"number":118,"code":"            let file: IFile = JSON.parse(content);"},{"number":119,"code":"            let output: string = \"\";"},{"number":120,"code":"            let inCodeBlock = false;"},{"number":121,"code":""},{"number":122,"code":"            for (let i = 0; i < file.lines.length; i++) {"},{"number":123,"code":"                if (typeof(file.lines[i].comment) === \"string\" && file.lines[i].comment !== \"\" && file.lines[i].comment !== null) {"},{"number":124,"code":"                    file.lines[i].comment = this.replaceAnchors(file.lines[i].comment, file.name, i);"},{"number":125,"code":"                    file.lines[i].comment = this.replaceLinks(file.lines[i].comment, file.name, i);"},{"number":126,"code":"                }"},{"number":127,"code":"            }"},{"number":128,"code":""},{"number":129,"code":"            for (let i = 0; i < file.lines.length; i++) {"},{"number":130,"code":""},{"number":131,"comment":" Comment","code":"               "},{"number":132,"code":"                if (typeof(file.lines[i].comment) === \"string\" && file.lines[i].comment !== null) {"},{"number":133,"code":"                    if (inCodeBlock) {"},{"number":134,"comment":" Close the current block of code. ","code":"                        output += \"\\n\" + \"```\" ;"},{"number":135,"code":"                        inCodeBlock = false;"},{"number":136,"code":"                    }"},{"number":137,"code":""},{"number":138,"code":"                    output += \"\\n\" + file.lines[i].comment;"},{"number":139,"code":"                }"},{"number":140,"code":""},{"number":141,"comment":" Code","code":"               "},{"number":142,"code":"                if (typeof(file.lines[i].code) === \"string\" && file.lines[i].code !== null) {"},{"number":143,"code":"                    if (!inCodeBlock) {"},{"number":144,"comment":" Open new code block. ","code":"                        output += \"\\n\" + \"```\" + file.type;"},{"number":145,"code":"                        inCodeBlock = true;"},{"number":146,"code":"                    }"},{"number":147,"code":"                    output += \"\\n\" + file.lines[i].code;"},{"number":148,"code":"                }"},{"number":149,"code":"            }"},{"number":150,"code":""},{"number":151,"code":"            if (inCodeBlock) {"},{"number":152,"comment":" Close the current block of code. ","code":"                output += \"\\n\" + \"```\";"},{"number":153,"code":"                inCodeBlock = false;"},{"number":154,"code":"            }"},{"number":155,"code":""},{"number":156,"code":"            let filePathArray = path.join(outputDir, file.name + \".md\").split(\"/\");"},{"number":157,"code":"            filePathArray.pop();"},{"number":158,"code":"            let filePath = filePathArray.join(\"/\");"},{"number":159,"code":""},{"number":160,"code":"            mkdirp(filePath, function (err) {"},{"number":161,"code":"                if (err) {"},{"number":162,"code":"                    logger.fatal(err.message);"},{"number":163,"code":"                }"},{"number":164,"code":"                else {"},{"number":165,"code":"                    let fileName = path.join(outputDir, file.name + \".md\");"},{"number":166,"code":"                    that.outputFiles.push(fileName);"},{"number":167,"code":"                    logger.debug(\"Saving output for \" + file.type + \" file \" + file.name + \" as \" + fileName);"},{"number":168,"code":"                    writeFileSync(fileName, output, { flag: \"w\" });"},{"number":169,"code":"                }"},{"number":170,"code":"            });"},{"number":171,"code":""},{"number":172,"code":"            next();"},{"number":173,"code":"        }"},{"number":174,"code":"    }"},{"number":175,"code":""},{"number":176,"longComment":true,"comment":" !MarkdownGenerator/replaceAnchors"},{"number":177,"longComment":true,"comment":"## Replace Anchors"},{"number":178,"longComment":true,"comment":"Processes a comment line, replacing anchors with markdown anchor link tags"},{"number":179,"longComment":true,"comment":""},{"number":180,"code":"    replaceAnchors(comment: string,  fileName: string, line: number, position?: number) {"},{"number":181,"code":"        let pos = position || 0;"},{"number":182,"code":""},{"number":183,"comment":" Look at the line for anchors - replace them with links. ","code":"       "},{"number":184,"code":"        let match = XRegExp.exec(comment, this.anchorRegExp, pos, false);"},{"number":185,"code":""},{"number":186,"code":"        if (!match) {"},{"number":187,"code":"            return comment;"},{"number":188,"code":"        } else {"},{"number":189,"code":""},{"number":190,"code":"            let anchor = match[1].replace(\"/\", \"-\").toLowerCase();"},{"number":191,"code":""},{"number":192,"longComment":true,"comment":""},{"number":193,"longComment":true,"comment":"Markdown doesn't natively support acnhors, but you can make them work "},{"number":194,"longComment":true,"comment":"with simple html. In GitHub, however, anchors are prefixed with 'user-content'"},{"number":195,"longComment":true,"comment":"For a discussion anchors in markdown see @issue/4"},{"number":196,"longComment":true,"comment":""},{"number":197,"code":"            if (this.htmlAnchors || this.gitHubHtmlAnchors) {"},{"number":198,"code":"                let replacementText = '<a name=\"' + anchor + '\" id=\"' + anchor + '\" ></a>';"},{"number":199,"code":""},{"number":200,"code":"                if (this.gitHubHtmlAnchors) {"},{"number":201,"code":"                    replacementText += \"[🔗](#user-content-\" + anchor + \")\" + match[1];"},{"number":202,"code":"                } else {"},{"number":203,"code":"                    replacementText += \"[🔗](#\" + anchor + \")\" + match[1];"},{"number":204,"code":"                }"},{"number":205,"code":""},{"number":206,"code":"                comment = comment.replace(match[0], replacementText);"},{"number":207,"code":"                return this.replaceAnchors(comment, fileName, line, pos + match[0].length);"},{"number":208,"code":"            }"},{"number":209,"code":"        }"},{"number":210,"code":"    }"},{"number":211,"code":""},{"number":212,"longComment":true,"comment":" !MarkdownGenerator/replaceLinks"},{"number":213,"longComment":true,"comment":"## Replace Links"},{"number":214,"longComment":true,"comment":"Processes a comment line, replacing links with markdown links. "},{"number":215,"longComment":true,"comment":"This function calls itself recursively until all links are replaced."},{"number":216,"longComment":true,"comment":""},{"number":217,"code":"    replaceLinks(comment: string, fileName: string, line: number, position?: number) {"},{"number":218,"code":"        let pos = position || 0;"},{"number":219,"code":""},{"number":220,"code":"        let linkPrefix = this.getLinkPrefix(fileName);"},{"number":221,"code":""},{"number":222,"comment":" Look at the line for anchors - replace them with links. ","code":"       "},{"number":223,"code":"        let match = XRegExp.exec(comment, this.linkRegExp, pos, false);"},{"number":224,"code":""},{"number":225,"code":"        if (!match) {"},{"number":226,"code":"            return comment;"},{"number":227,"code":"        } else {"},{"number":228,"code":""},{"number":229,"comment":" Look external link.","code":"           "},{"number":230,"code":"            let tagArray = match[1].split(\"/\");"},{"number":231,"code":"            let externalTag =  _.findWhere(this.externalReferences, {anchor: tagArray[0]});"},{"number":232,"code":"            if (externalTag) {"},{"number":233,"code":"                logger.debug(\"found external link: \" + match[1]);"},{"number":234,"code":"                let anchor = match[1].replace(\"/\", \"-\").toLowerCase();"},{"number":235,"code":"                comment = comment.replace(match[0], \" [\" + match[1] + \"](\" + externalTag.path + \") \");"},{"number":236,"code":"                return this.replaceLinks(comment, fileName, line, pos + match[0].length);"},{"number":237,"code":"            }"},{"number":238,"code":""},{"number":239,"comment":" Look for internal link.","code":"           "},{"number":240,"code":"            let internalTag =  _.findWhere(this.tags, {anchor: match[1]});"},{"number":241,"code":"            if (!internalTag) {"},{"number":242,"comment":" If we can't match this link, then let's just stop processing this line and warn the user.","code":"               "},{"number":243,"code":"                logger.warn(\"link: \" + match[1] + \" in \" + fileName + \":\" + line + \":\" + pos + \" does not have a cooresponding anchor, so link cannot be created.\");"},{"number":244,"code":"                return comment;"},{"number":245,"code":"            } else {"},{"number":246,"code":"                logger.debug(\"found internal link: \" + match[1] + \" \" + internalTag.path);"},{"number":247,"code":"                let anchor = match[1].replace(\"/\", \"-\").toLowerCase();"},{"number":248,"code":""},{"number":249,"comment":" Make GitHub-hosted Markdown adjustment. See @issue/4","code":"               "},{"number":250,"code":"                if (this.gitHubHtmlAnchors) {"},{"number":251,"code":"                    comment = comment.replace(match[0], \" [\" + match[1] + \"](\" + linkPrefix + internalTag.path + \".md#user-content-\" + anchor + \")\");"},{"number":252,"code":"                } else {"},{"number":253,"code":"                    comment = comment.replace(match[0], \" [\" + match[1] + \"](\" + linkPrefix + internalTag.path + \".md#\" + anchor + \")\");"},{"number":254,"code":"                }"},{"number":255,"code":"            }"},{"number":256,"code":"            return this.replaceLinks(comment, fileName, line, pos + match[0].length);"},{"number":257,"code":"        }"},{"number":258,"code":"    }"},{"number":259,"code":""},{"number":260,"longComment":true,"comment":" !MarkdownGenerator/generateIndexPage"},{"number":261,"longComment":true,"comment":"## Generates the \"Index Page\""},{"number":262,"longComment":true,"comment":"This generates the index page, listing all the link collections, "},{"number":263,"longComment":true,"comment":"and sucks in the user's defined README. "},{"number":264,"longComment":true,"comment":""},{"number":265,"code":"    generateIndexPage(readmeText?): void {"},{"number":266,"code":"        logger.info(\"generating Duly Noted Index file.\");"},{"number":267,"code":"        let that = this;"},{"number":268,"code":""},{"number":269,"code":"        let outputMap = {"},{"number":270,"code":"            project: this.projectName,"},{"number":271,"code":"            collections: [],"},{"number":272,"code":"            files: this.outputFiles,"},{"number":273,"code":"            readme: readmeText"},{"number":274,"code":"        };"},{"number":275,"code":""},{"number":276,"code":"        let collections = that.referenceCollection.getTagsByCollection();"},{"number":277,"code":""},{"number":278,"code":"        for (let i = 0; i < collections.length; i++) {"},{"number":279,"code":"            let anchors = _.clone(collections[i].anchors);"},{"number":280,"code":"            let name = collections[i].name.split(\"/\");"},{"number":281,"code":"            name.shift();"},{"number":282,"code":"            name.shift();"},{"number":283,"code":"            name = name.join(\"/\");"},{"number":284,"code":""},{"number":285,"code":"            for (let x = 0; x < anchors.length; x++) {"},{"number":286,"code":"                let anchor = anchors[x].linkStub.replace(\"/\", \"-\").toLowerCase();"},{"number":287,"code":""},{"number":288,"code":"                anchors[x].path = anchors[x].path + \".md#\";"},{"number":289,"code":""},{"number":290,"comment":" Adjustment for gitHub anchor links. See @issue/4","code":"               "},{"number":291,"code":"                if (this.gitHubHtmlAnchors) {"},{"number":292,"code":"                    anchors[x].path += \"user-content-\";"},{"number":293,"code":"                }"},{"number":294,"code":""},{"number":295,"code":"                if (name !== \"\") {"},{"number":296,"code":"                    anchors[x].path += name.replace(\"/\", \"-\").toLowerCase() + \"-\";"},{"number":297,"code":"                }"},{"number":298,"code":""},{"number":299,"code":"                anchors[x].path += anchor;"},{"number":300,"code":""},{"number":301,"code":"            }"},{"number":302,"code":""},{"number":303,"code":"            outputMap.collections.push({"},{"number":304,"code":"                name: name,"},{"number":305,"code":"                anchors: anchors"},{"number":306,"code":"            });"},{"number":307,"code":"        }"},{"number":308,"code":""},{"number":309,"code":"        let md = \"# \" + this.projectName + \" documentation \\n\";"},{"number":310,"code":""},{"number":311,"code":"        md += \"### Anchor Collections \\n\";"},{"number":312,"code":"        for (let i = 0; i < outputMap.collections.length; i++) {"},{"number":313,"code":"           md += \"\\n#### \" + outputMap.collections[i].name + \" \\n\";"},{"number":314,"code":""},{"number":315,"code":"           for (let x = 0; x < outputMap.collections[i].anchors.length; x++) {"},{"number":316,"code":"               md += \"* [\" + outputMap.collections[i].anchors[x].anchor + \"]\" + \"(\" + outputMap.collections[i].anchors[x].path + \") \\n\";"},{"number":317,"code":"           }"},{"number":318,"code":"        }"},{"number":319,"code":""},{"number":320,"code":"        md += \"\\n------------------------------ \\n\";"},{"number":321,"code":"        md += \"\\n### Documentation Files \\n\";"},{"number":322,"code":""},{"number":323,"code":"        for (let i = 0; i < outputMap.files.length; i++) {"},{"number":324,"code":""},{"number":325,"longComment":true,"comment":""},{"number":326,"longComment":true,"comment":"This shifts off the root folder b/c our index file is inside the output folder, "},{"number":327,"longComment":true,"comment":"not one level up. See @issue/5"},{"number":328,"longComment":true,"comment":"> EXAMPLE: "},{"number":329,"longComment":true,"comment":"> docs/myfile.ts.md is linked to as ./myfile.ts.md"},{"number":330,"longComment":true,"comment":""},{"number":331,"code":"            let path: any = outputMap.files[i].split(\"/\");"},{"number":332,"code":"            let name = path;"},{"number":333,"code":"            path.shift();"},{"number":334,"code":"            path.unshift(\".\");"},{"number":335,"code":"            path = path.join(\"/\");"},{"number":336,"code":"            name.shift();"},{"number":337,"code":"            name = name.join(\"/\");"},{"number":338,"code":""},{"number":339,"code":"            md += \"* [\" + name + \"](\" + path + \") \\n\";"},{"number":340,"code":"        }"},{"number":341,"code":"        md += \"\\n------------------------------ \\n\";"},{"number":342,"code":""},{"number":343,"code":"        md += outputMap.readme;"},{"number":344,"code":""},{"number":345,"code":"        writeFileSync(path.join(that.outputDir, that.indexFile), md, { flag: \"w\" });"},{"number":346,"code":"    }"},{"number":347,"code":""},{"number":348,"code":""},{"number":349,"longComment":true,"comment":" !MarkdownGenerator/getLinkPrefix"},{"number":350,"longComment":true,"comment":"Generate a link Prefix from a fileName"},{"number":351,"longComment":true,"comment":"> NOTE: Without this code, links will not properly navigated to deeply nested pages with relative linking."},{"number":352,"longComment":true,"comment":""},{"number":353,"code":"    getLinkPrefix(fileName: string): string {"},{"number":354,"code":"        let fileNameAsArray = fileName.split(\"/\");"},{"number":355,"code":"        let linkPrefix = \"\";"},{"number":356,"code":"        for (let i = 0; i < fileNameAsArray.length - 2; i++) {"},{"number":357,"code":"            linkPrefix += \"../\";"},{"number":358,"code":"        }"},{"number":359,"code":""},{"number":360,"code":"        return linkPrefix;"},{"number":361,"code":"    }"},{"number":362,"code":"}"},{"number":363,"code":""}],"type":"typescript"}