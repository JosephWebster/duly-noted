{"name":"./ts/modules/referenceParser.ts","lines":[{"number":0,"longComment":true,"comment":""},{"number":1,"longComment":true,"comment":"# !ReferenceParser"},{"number":2,"longComment":true,"comment":"@authors/chris"},{"number":3,"longComment":true,"comment":"@license"},{"number":4,"comment":""},{"number":5,"code":""},{"number":6,"code":"import {IReferenceCollection, IAnchor, ReferenceCollection} from \"../classes/referenceCollection\";"},{"number":7,"code":"import {IConfig, IExternalReference} from \"../classes/IConfig\";"},{"number":8,"code":"import {IFile, ILine} from \"../classes/IFile\";"},{"number":9,"code":"import {getFileType} from \"../helpers/fileType\";"},{"number":10,"code":"import {writeFileSync, mkdirSync, accessSync, F_OK, openSync} from \"fs\";"},{"number":11,"code":"import mkdirp = require(\"mkdirp\");"},{"number":12,"code":"import * as path from \"path\";"},{"number":13,"code":"import XRegExp = require(\"xregexp\");"},{"number":14,"code":"import lineReader = require(\"line-reader\");"},{"number":15,"code":"import Q = require(\"q\");"},{"number":16,"code":"import {doInOrder, doNext} from \"../helpers/helpers\";"},{"number":17,"code":""},{"number":18,"code":"import log4js = require(\"log4js\");"},{"number":19,"code":"let logger = log4js.getLogger(\"duly-noted::ReferenceParser\");"},{"number":20,"code":""},{"number":21,"longComment":true,"comment":""},{"number":22,"longComment":true,"comment":"## !interfaces/IReferenceParser"},{"number":23,"comment":""},{"number":24,"code":"export interface IReferenceParser {"},{"number":25,"code":"    parse(): Q.Promise<IReferenceCollection>;"},{"number":26,"code":"}"},{"number":27,"code":""},{"number":28,"longComment":true,"comment":""},{"number":29,"longComment":true,"comment":"## !constant/parseLoc"},{"number":30,"comment":""},{"number":31,"code":"export const parseLoc = \"duly-noted\";"},{"number":32,"code":""},{"number":33,"longComment":true,"comment":""},{"number":34,"longComment":true,"comment":"## !classes/ReferenceParser"},{"number":35,"comment":""},{"number":36,"code":"export class ReferenceParser implements IReferenceParser {"},{"number":37,"code":"    files: string[];"},{"number":38,"code":"    rootCollection: IReferenceCollection;"},{"number":39,"code":"    anchorRegExp: RegExp;"},{"number":40,"code":"    commentRegExp: RegExp;"},{"number":41,"code":"    longCommentOpenRegExp: RegExp;"},{"number":42,"code":"    longCommentLineRegExp: RegExp;"},{"number":43,"code":"    longCommentCloseRegExp: RegExp;"},{"number":44,"code":"    externalReferences: IExternalReference[];"},{"number":45,"code":""},{"number":46,"longComment":true,"comment":""},{"number":47,"longComment":true,"comment":"### Creates an instance of @classes/ReferenceParser"},{"number":48,"comment":""},{"number":49,"code":"    constructor(config: IConfig, logLevel?: string) {"},{"number":50,"code":"        this.files = config.files;"},{"number":51,"code":"        this.rootCollection = new ReferenceCollection(parseLoc, logLevel);"},{"number":52,"code":"        this.anchorRegExp = new RegExp(config.anchorRegExp);"},{"number":53,"code":"        this.commentRegExp = new RegExp(config.commentRegExp);"},{"number":54,"code":"        this.longCommentOpenRegExp = new RegExp(config.longCommentOpenRegExp);"},{"number":55,"code":"        this.longCommentLineRegExp = new RegExp(config.longCommentLineRegExp);"},{"number":56,"code":"        this.longCommentCloseRegExp = new RegExp(config.longCommentCloseRegExp);"},{"number":57,"code":"        this.externalReferences = config.externalReferences;"},{"number":58,"code":"        logger.setLevel(logLevel || \"DEBUG\");"},{"number":59,"code":"        logger.debug(\"ready\");"},{"number":60,"code":"    }"},{"number":61,"code":""},{"number":62,"longComment":true,"comment":""},{"number":63,"longComment":true,"comment":"## Parse"},{"number":64,"longComment":true,"comment":"Parser all files for anchors - produce a @interfaces/IReferenceCollection"},{"number":65,"comment":""},{"number":66,"code":"    public parse(): Q.Promise<IReferenceCollection> {"},{"number":67,"code":"        let that = this;"},{"number":68,"code":"        return Q.Promise<IReferenceCollection>((resolve, reject) => {"},{"number":69,"code":"            logger.info(\"Starting parse actions for \" + that.files.length + \" files.\");"},{"number":70,"code":""},{"number":71,"code":"            let parseActions = [];"},{"number":72,"code":""},{"number":73,"code":"            for (let i = 0; i < that.files.length; i++) {"},{"number":74,"code":"                let fileName = that.files[i].split(\".\");"},{"number":75,"code":"                let extension = fileName[fileName.length - 1];"},{"number":76,"code":"                if (extension === \"md\") {"},{"number":77,"code":"                    parseActions.push(that.parseAsMarkdown(that.files[i]));"},{"number":78,"code":"                } else {"},{"number":79,"code":"                    parseActions.push(that.parseFile(that.files[i]));"},{"number":80,"code":"                }"},{"number":81,"code":"            }"},{"number":82,"code":""},{"number":83,"code":"            Q.all(parseActions)"},{"number":84,"code":"            .then(() => {"},{"number":85,"code":"                logger.debug(\"Saving out internalReferences.json & externalReferences.json\");"},{"number":86,"code":"                writeFileSync(path.join(parseLoc, \"internalReferences.json\"), JSON.stringify(that.rootCollection), { flag: \"w\" });"},{"number":87,"code":"                writeFileSync(path.join(parseLoc, \"externalReferences.json\"), JSON.stringify(that.externalReferences), { flag: \"w\" });"},{"number":88,"code":"                resolve(that.rootCollection);"},{"number":89,"code":"            });"},{"number":90,"code":"        });"},{"number":91,"code":"    }"},{"number":92,"code":""},{"number":93,"longComment":true,"comment":""},{"number":94,"longComment":true,"comment":"## Parse As Markdown"},{"number":95,"longComment":true,"comment":"When a file is markdown, we parse the whole thing."},{"number":96,"comment":""},{"number":97,"code":"    parseAsMarkdown(fileName: string): Q.Promise<{}> {"},{"number":98,"code":"        logger.debug(\"parsing markdown file: \" + fileName);"},{"number":99,"code":"        let that = this;"},{"number":100,"code":"        let file: IFile = {"},{"number":101,"code":"            name: fileName,"},{"number":102,"code":"            type: \"markdown\","},{"number":103,"code":"            lines: []"},{"number":104,"code":"        };"},{"number":105,"comment":" Line numbering traditionally starts at 1","code":"        let lineNumber = 0;"},{"number":106,"code":"        return Q.Promise((resolve, reject) => {"},{"number":107,"code":"            lineReader.eachLine(fileName, (line, last) => {"},{"number":108,"code":"                let thisLine: ILine = {"},{"number":109,"code":"                    number: lineNumber"},{"number":110,"code":"                };"},{"number":111,"code":""},{"number":112,"code":"                file.lines.push(thisLine);"},{"number":113,"comment":" In Markdown all lines are considered comments","code":"                file.lines[lineNumber].comment = line;"},{"number":114,"code":""},{"number":115,"code":"                that.parseComment(file.lines[lineNumber].comment, fileName, lineNumber)"},{"number":116,"code":"                .then(() => {"},{"number":117,"code":"                    if (last) {"},{"number":118,"code":"                        that.writeOutFile(file)"},{"number":119,"code":"                        .then(() => {"},{"number":120,"code":"                            resolve(null);"},{"number":121,"code":"                            return false;"},{"number":122,"code":"                        })"},{"number":123,"code":"                        .catch((err) => {"},{"number":124,"code":"                            logger.fatal(err.message);"},{"number":125,"code":"                        });"},{"number":126,"code":"                    }"},{"number":127,"code":"                });"},{"number":128,"code":""},{"number":129,"code":"                lineNumber++;"},{"number":130,"code":"            });"},{"number":131,"code":"        });"},{"number":132,"code":"    }"},{"number":133,"code":""},{"number":134,"longComment":true,"comment":""},{"number":135,"longComment":true,"comment":"## Parse File"},{"number":136,"longComment":true,"comment":"Parse a file to a file map. !ParseFile"},{"number":137,"comment":""},{"number":138,"code":"    parseFile(fileName: string): Q.Promise<{}> {"},{"number":139,"code":"        logger.debug(\"parsing code file: \" + fileName);"},{"number":140,"code":"        let that = this;"},{"number":141,"code":"        let file: IFile;"},{"number":142,"code":"        let insideLongComment = false;"},{"number":143,"code":"        return Q.Promise((resolve, reject) => {"},{"number":144,"code":"            logger.debug(\"Working on file: \" + fileName);"},{"number":145,"code":"            file = {"},{"number":146,"code":"                name: fileName,"},{"number":147,"code":"                lines: [],"},{"number":148,"code":"                type: getFileType(fileName)"},{"number":149,"code":"            };"},{"number":150,"code":""},{"number":151,"comment":" Line numbering traditionally starts at 1 (not 0)","code":"           "},{"number":152,"code":"            let lineNumber = 0;"},{"number":153,"comment":" Read each line of the file.","code":"           "},{"number":154,"code":"            lineReader.eachLine(fileName, (line, last) => {"},{"number":155,"code":""},{"number":156,"code":"                let thisLine: ILine = {"},{"number":157,"code":"                    number: lineNumber"},{"number":158,"code":"                };"},{"number":159,"code":"                file.lines.push(thisLine);"},{"number":160,"code":""},{"number":161,"comment":" Logic for long comments, either beginning, or already started.","code":"               "},{"number":162,"code":"                let longCommentOpenMatch = XRegExp.exec(line, that.longCommentOpenRegExp, 0, false);"},{"number":163,"code":""},{"number":164,"comment":" These comments must come at beginning of line.","code":"                if (!insideLongComment && longCommentOpenMatch) {"},{"number":165,"code":"                    insideLongComment = true;"},{"number":166,"code":"                    file.lines[lineNumber].longComment = true;"},{"number":167,"code":"                }"},{"number":168,"code":""},{"number":169,"comment":" We are not inside a long comment - look for a regular comment.","code":"               "},{"number":170,"code":"                if (!insideLongComment) {"},{"number":171,"code":"                    let match = XRegExp.exec(line, that.commentRegExp, 0, false);"},{"number":172,"code":""},{"number":173,"comment":" Contains a tradition comment","code":"                   "},{"number":174,"code":"                    if (match) {"},{"number":175,"code":""},{"number":176,"code":"                        file.lines[lineNumber].comment = match[1];"},{"number":177,"code":"                        file.lines[lineNumber].code = line.substr(0, match.index - 1);"},{"number":178,"code":""},{"number":179,"code":"                        that.parseComment(file.lines[lineNumber].comment, fileName, lineNumber)"},{"number":180,"code":"                            .then(() => {"},{"number":181,"code":"                                if (last) {"},{"number":182,"code":"                                    that.writeOutFile(file)"},{"number":183,"code":"                                    .then(() => {"},{"number":184,"code":"                                        resolve(null);"},{"number":185,"code":"                                        return false;"},{"number":186,"code":"                                    })"},{"number":187,"code":"                                    .catch((err) => {"},{"number":188,"code":"                                        logger.fatal(err.message);"},{"number":189,"code":"                                    });"},{"number":190,"code":"                                }"},{"number":191,"code":"                            });"},{"number":192,"comment":" Not a comment (code only)","code":"                   "},{"number":193,"code":"                    } else {"},{"number":194,"code":"                        file.lines[lineNumber].code = line;"},{"number":195,"code":"                        if (last) {"},{"number":196,"code":"                            that.writeOutFile(file)"},{"number":197,"code":"                            .then(() => {"},{"number":198,"code":"                                resolve(null);"},{"number":199,"code":"                                return false;"},{"number":200,"code":"                            })"},{"number":201,"code":"                            .catch((err) => {"},{"number":202,"code":"                                logger.fatal(err.message);"},{"number":203,"code":"                            });"},{"number":204,"code":"                        }"},{"number":205,"code":"                    }"},{"number":206,"comment":" Inside a long comment - so the whole thing is a comment","code":"               "},{"number":207,"comment":" If this line contains a long comment closing symbol, then next line isn't long comment.","code":"               "},{"number":208,"code":"                } else {"},{"number":209,"code":"                    if (XRegExp.exec(line, this.longCommentCloseRegExp, 0)) {"},{"number":210,"code":"                        file.lines[lineNumber].comment = \"\";"},{"number":211,"code":"                        insideLongComment = false;"},{"number":212,"comment":" This long comment hasn't been closed, so we should parse it for links.","code":"                   "},{"number":213,"code":"                    } else {"},{"number":214,"code":""},{"number":215,"code":"                        file.lines[lineNumber].longComment = true;"},{"number":216,"code":""},{"number":217,"code":"                        if (longCommentOpenMatch) {"},{"number":218,"code":"                            file.lines[lineNumber].comment = longCommentOpenMatch[1].trim();"},{"number":219,"code":"                        } else {"},{"number":220,"code":"                            let match = XRegExp.exec(line, this.longCommentLineRegExp, 0);"},{"number":221,"code":"                            if (match && match[1]) {"},{"number":222,"code":"                              file.lines[lineNumber].comment = match[1].trim();"},{"number":223,"code":"                            } else {"},{"number":224,"comment":" Blank Line inside long comment...","code":"                              file.lines[lineNumber].comment = \"\";"},{"number":225,"code":"                            }"},{"number":226,"code":"                        }"},{"number":227,"code":""},{"number":228,"code":"                        that.parseComment(line, fileName, lineNumber)"},{"number":229,"code":"                        .then(() => {"},{"number":230,"code":"                            if (last) {"},{"number":231,"code":"                                that.writeOutFile(file)"},{"number":232,"code":"                                    .then(() => {"},{"number":233,"code":"                                        resolve(null);"},{"number":234,"code":"                                        return false;"},{"number":235,"code":"                                    })"},{"number":236,"code":"                                    .catch((err) => {"},{"number":237,"code":"                                        logger.fatal(err.message);"},{"number":238,"code":"                                    });"},{"number":239,"code":"                            }"},{"number":240,"code":"                        });"},{"number":241,"code":"                    }"},{"number":242,"code":""},{"number":243,"comment":" If this is the last line, then we can wrap things up.","code":"                   "},{"number":244,"code":"                    if (last) {"},{"number":245,"code":"                        that.writeOutFile(file)"},{"number":246,"code":"                        .then(() => {"},{"number":247,"code":"                            resolve(null);"},{"number":248,"code":"                            return false;"},{"number":249,"code":"                        })"},{"number":250,"code":"                        .catch((err) => {"},{"number":251,"code":"                            logger.fatal(err.message);"},{"number":252,"code":"                        });"},{"number":253,"code":"                    }"},{"number":254,"code":"                }"},{"number":255,"code":""},{"number":256,"code":"                lineNumber++;"},{"number":257,"code":"            });"},{"number":258,"code":"        });"},{"number":259,"code":"    }"},{"number":260,"code":""},{"number":261,"longComment":true,"comment":""},{"number":262,"longComment":true,"comment":"## Write Out File"},{"number":263,"longComment":true,"comment":"Writes out a file map"},{"number":264,"comment":""},{"number":265,"code":"    writeOutFile(file: IFile) {"},{"number":266,"code":"        let that = this;"},{"number":267,"code":"        return Q.Promise<{}>((resolve, reject) => {"},{"number":268,"code":"            let filePathArray = path.join(parseLoc, file.name + \".json\").split(\"/\");"},{"number":269,"code":"            filePathArray.pop();"},{"number":270,"code":"            let filePath = filePathArray.join(\"/\");"},{"number":271,"code":"            mkdirp(filePath, function (err) {"},{"number":272,"code":"                if (err) {"},{"number":273,"code":"                    logger.fatal(err.message);"},{"number":274,"code":"                    reject(err);"},{"number":275,"code":"                }"},{"number":276,"code":"                else {"},{"number":277,"code":"                    logger.debug(\"Saving output for: \" + file.name);"},{"number":278,"code":"                    writeFileSync(path.join(parseLoc, file.name + \".json\"), JSON.stringify(file), { flag: \"w\" });"},{"number":279,"code":"                    resolve(null);"},{"number":280,"code":"                }"},{"number":281,"code":"            });"},{"number":282,"code":"        });"},{"number":283,"code":"    }"},{"number":284,"code":""},{"number":285,"longComment":true,"comment":""},{"number":286,"longComment":true,"comment":"## Parse Comment"},{"number":287,"longComment":true,"comment":"Once a comment is found (see @ParseFile above for example) this will parse"},{"number":288,"longComment":true,"comment":"that commant for anchors. It will add those anchors to the @interfaces/IReferenceCollection"},{"number":289,"longComment":true,"comment":"for the entire project."},{"number":290,"comment":""},{"number":291,"code":"    parseComment(comment: string, fileName: string, lineNumber: number): Q.Promise<{}> {"},{"number":292,"code":"        let that = this;"},{"number":293,"code":"        return Q.Promise<{}>((resolve, reject) => {"},{"number":294,"code":"            let pos = 0;"},{"number":295,"code":"            let match;"},{"number":296,"code":""},{"number":297,"code":"            while (match = XRegExp.exec(comment, that.anchorRegExp, pos, false)) {"},{"number":298,"code":"                logger.debug(\"found anchor: \" + match[1]);"},{"number":299,"code":""},{"number":300,"code":"                let parts = match[1].split(\"/\");"},{"number":301,"code":""},{"number":302,"code":"                that.rootCollection.addAnchorTag(parts, fileName, lineNumber);"},{"number":303,"code":"                resolve(null);"},{"number":304,"code":""},{"number":305,"code":"                pos = match.index + match[0].length;"},{"number":306,"code":"            }"},{"number":307,"code":"            resolve(null);"},{"number":308,"code":"        });"},{"number":309,"code":"    };"},{"number":310,"code":"}"}],"type":"typescript"}