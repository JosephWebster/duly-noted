{"name":"./ts/modules/referenceParser.ts","lines":[{"number":0,"longComment":true,"comment":""},{"number":1,"longComment":true,"comment":"# !ReferenceParser"},{"number":2,"longComment":true,"comment":"@authors/chris"},{"number":3,"longComment":true,"comment":"@license"},{"number":4,"comment":""},{"number":5,"code":""},{"number":6,"code":"import {IReferenceCollection, IAnchor, ReferenceCollection} from \"../classes/referenceCollection\";"},{"number":7,"code":"import {IConfig, IExternalReference} from \"../classes/IConfig\";"},{"number":8,"code":"import {IFile, ILine} from \"../classes/IFile\";"},{"number":9,"code":"import {getFileType} from \"../helpers/fileType\";"},{"number":10,"code":"import {writeFileSync, mkdirSync, accessSync, F_OK, openSync, readFileSync} from \"fs\";"},{"number":11,"code":"import mkdirp = require(\"mkdirp\");"},{"number":12,"code":"import * as path from \"path\";"},{"number":13,"code":"import XRegExp = require(\"xregexp\");"},{"number":14,"code":"import lineReader = require(\"line-reader\");"},{"number":15,"code":"import Q = require(\"q\");"},{"number":16,"code":"import {doInOrder, doNext} from \"../helpers/helpers\";"},{"number":17,"code":""},{"number":18,"code":"import log4js = require(\"log4js\");"},{"number":19,"code":"let logger = log4js.getLogger(\"duly-noted::ReferenceParser\");"},{"number":20,"code":""},{"number":21,"longComment":true,"comment":""},{"number":22,"longComment":true,"comment":"## !interfaces/IReferenceParser"},{"number":23,"comment":""},{"number":24,"code":"export interface IReferenceParser {"},{"number":25,"code":"    parse(): Q.Promise<IReferenceCollection>;"},{"number":26,"code":"}"},{"number":27,"code":""},{"number":28,"longComment":true,"comment":""},{"number":29,"longComment":true,"comment":"## !constant/parseLoc"},{"number":30,"comment":""},{"number":31,"code":"export const parseLoc = \"duly-noted\";"},{"number":32,"longComment":true,"comment":""},{"number":33,"longComment":true,"comment":"## !constant/commentPatterns"},{"number":34,"comment":""},{"number":35,"code":"export const commentPatterns = \"duly-noted\";"},{"number":36,"code":""},{"number":37,"code":""},{"number":38,"longComment":true,"comment":""},{"number":39,"longComment":true,"comment":"## !classes/ReferenceParser"},{"number":40,"comment":""},{"number":41,"code":"export class ReferenceParser implements IReferenceParser {"},{"number":42,"code":"    files: string[];"},{"number":43,"code":"    rootCollection: IReferenceCollection;"},{"number":44,"code":"    anchorRegExp: RegExp;"},{"number":45,"code":"    commentPatterns: {}[];"},{"number":46,"code":"    externalReferences: IExternalReference[];"},{"number":47,"code":""},{"number":48,"longComment":true,"comment":""},{"number":49,"longComment":true,"comment":"### Creates an instance of @classes/ReferenceParser"},{"number":50,"comment":""},{"number":51,"code":"    constructor(config: IConfig, logLevel?: string) {"},{"number":52,"code":"        this.files = config.files;"},{"number":53,"code":"        this.rootCollection = new ReferenceCollection(parseLoc, logLevel);"},{"number":54,"code":"        this.anchorRegExp = new RegExp(config.anchorRegExp);"},{"number":55,"code":""},{"number":56,"code":"        let commentPatternsFile = path.join(__dirname, \"../comment-patterns.json\");"},{"number":57,"code":"        logger.debug(\"Loading Comment Patterns from \" + commentPatternsFile);"},{"number":58,"code":"        this.commentPatterns = JSON.parse(readFileSync(commentPatternsFile).toString());"},{"number":59,"code":"        this.externalReferences = config.externalReferences;"},{"number":60,"code":"        logger.setLevel(logLevel || \"DEBUG\");"},{"number":61,"code":"        logger.debug(\"ready\");"},{"number":62,"code":"    }"},{"number":63,"code":""},{"number":64,"longComment":true,"comment":""},{"number":65,"longComment":true,"comment":"## Parse"},{"number":66,"longComment":true,"comment":"Parser all files for anchors - produce a @interfaces/IReferenceCollection"},{"number":67,"comment":""},{"number":68,"code":"    public parse(): Q.Promise<IReferenceCollection> {"},{"number":69,"code":"        let that = this;"},{"number":70,"code":"        return Q.Promise<IReferenceCollection>((resolve, reject) => {"},{"number":71,"code":"            logger.info(\"Starting parse actions for \" + that.files.length + \" files.\");"},{"number":72,"code":""},{"number":73,"code":"            let parseActions = [];"},{"number":74,"code":""},{"number":75,"code":"            for (let i = 0; i < that.files.length; i++) {"},{"number":76,"code":"                let fileName = that.files[i].split(\".\");"},{"number":77,"code":"                let extension = fileName[fileName.length - 1];"},{"number":78,"code":"                if (extension === \"md\") {"},{"number":79,"code":"                    parseActions.push(that.parseAsMarkdown(that.files[i]));"},{"number":80,"code":"                } else {"},{"number":81,"code":"                    parseActions.push(that.parseFile(that.files[i]));"},{"number":82,"code":"                }"},{"number":83,"code":"            }"},{"number":84,"code":""},{"number":85,"code":"            Q.all(parseActions)"},{"number":86,"code":"            .then(() => {"},{"number":87,"code":"                logger.debug(\"Saving out internalReferences.json & externalReferences.json\");"},{"number":88,"code":"                writeFileSync(path.join(parseLoc, \"internalReferences.json\"), JSON.stringify(that.rootCollection), { flag: \"w\" });"},{"number":89,"code":"                writeFileSync(path.join(parseLoc, \"externalReferences.json\"), JSON.stringify(that.externalReferences), { flag: \"w\" });"},{"number":90,"code":"                resolve(that.rootCollection);"},{"number":91,"code":"            });"},{"number":92,"code":"        });"},{"number":93,"code":"    }"},{"number":94,"code":""},{"number":95,"longComment":true,"comment":""},{"number":96,"longComment":true,"comment":"## Parse As Markdown"},{"number":97,"longComment":true,"comment":"When a file is markdown, we parse the whole thing."},{"number":98,"comment":""},{"number":99,"code":"    parseAsMarkdown(fileName: string): Q.Promise<{}> {"},{"number":100,"code":"        logger.debug(\"parsing markdown file: \" + fileName);"},{"number":101,"code":"        let that = this;"},{"number":102,"code":"        let file: IFile = {"},{"number":103,"code":"            name: fileName,"},{"number":104,"code":"            type: \"markdown\","},{"number":105,"code":"            lines: []"},{"number":106,"code":"        };"},{"number":107,"comment":" Line numbering traditionally starts at 1","code":"        let lineNumber = 0;"},{"number":108,"code":"        return Q.Promise((resolve, reject) => {"},{"number":109,"code":"            lineReader.eachLine(fileName, (line, last) => {"},{"number":110,"code":"                let thisLine: ILine = {"},{"number":111,"code":"                    number: lineNumber"},{"number":112,"code":"                };"},{"number":113,"code":""},{"number":114,"code":"                file.lines.push(thisLine);"},{"number":115,"comment":" In Markdown all lines are considered comments","code":"                file.lines[lineNumber].comment = line;"},{"number":116,"code":""},{"number":117,"code":"                that.parseComment(file.lines[lineNumber].comment, fileName, lineNumber)"},{"number":118,"code":"                .then(() => {"},{"number":119,"code":"                    if (last) {"},{"number":120,"code":"                        that.writeOutFile(file)"},{"number":121,"code":"                        .then(() => {"},{"number":122,"code":"                            resolve(null);"},{"number":123,"code":"                            return false;"},{"number":124,"code":"                        })"},{"number":125,"code":"                        .catch((err) => {"},{"number":126,"code":"                            logger.fatal(err.message);"},{"number":127,"code":"                        });"},{"number":128,"code":"                    }"},{"number":129,"code":"                });"},{"number":130,"code":""},{"number":131,"code":"                lineNumber++;"},{"number":132,"code":"            });"},{"number":133,"code":"        });"},{"number":134,"code":"    }"},{"number":135,"code":""},{"number":136,"longComment":true,"comment":""},{"number":137,"longComment":true,"comment":"## Parse File"},{"number":138,"longComment":true,"comment":"Parse a file to a file map. !ParseFile"},{"number":139,"comment":""},{"number":140,"code":"    parseFile(fileName: string): Q.Promise<{}> {"},{"number":141,"code":"        logger.debug(\"parsing code file: \" + fileName);"},{"number":142,"code":"        let that = this;"},{"number":143,"code":"        let file: IFile;"},{"number":144,"code":"        let insideLongComment = false;"},{"number":145,"code":"        return Q.Promise((resolve, reject) => {"},{"number":146,"code":"            let commentRegExp;"},{"number":147,"code":"            let longCommentOpenRegExp;"},{"number":148,"code":"            let longCommentLineRegExp;"},{"number":149,"code":"            let longCommentCloseRegExp;"},{"number":150,"code":""},{"number":151,"code":"            logger.debug(\"Working on file: \" + fileName);"},{"number":152,"code":"            file = {"},{"number":153,"code":"                name: fileName,"},{"number":154,"code":"                lines: [],"},{"number":155,"code":"                type: getFileType(fileName)"},{"number":156,"code":"            };"},{"number":157,"code":""},{"number":158,"comment":" Load comment RegEx based on file type","code":"           "},{"number":159,"code":"            if (that.commentPatterns[file.type]) {"},{"number":160,"code":"                logger.debug(\"Using comment patten for \" + file.type);"},{"number":161,"code":"                commentRegExp = new RegExp(that.commentPatterns[file.type][\"commentRegExp\"]);"},{"number":162,"code":""},{"number":163,"code":"                if (that.commentPatterns[file.type][\"longCommentOpenRegExp\"]) longCommentOpenRegExp =  new RegExp(that.commentPatterns[file.type][\"longCommentOpenRegExp\"]);"},{"number":164,"code":"                else longCommentOpenRegExp = undefined;"},{"number":165,"code":""},{"number":166,"code":"                if (that.commentPatterns[file.type][\"longCommentLineRegExp\"]) longCommentLineRegExp =  new RegExp(that.commentPatterns[file.type][\"longCommentLineRegExp\"]);"},{"number":167,"code":"                else longCommentLineRegExp = undefined;"},{"number":168,"code":""},{"number":169,"code":"                if (that.commentPatterns[file.type][\"longCommentCloseRegExp\"]) longCommentCloseRegExp =  new RegExp(that.commentPatterns[file.type][\"longCommentCloseRegExp\"]);"},{"number":170,"code":"                else longCommentLineRegExp = undefined;"},{"number":171,"code":"            } else {"},{"number":172,"code":"                logger.debug(\"Using default comment patten.\");"},{"number":173,"code":"                commentRegExp =  new RegExp(that.commentPatterns[\"default\"][\"commentRegExp\"]);"},{"number":174,"code":"                longCommentOpenRegExp =  new RegExp(that.commentPatterns[\"default\"][\"longCommentOpenRegExp\"]);"},{"number":175,"code":"                longCommentLineRegExp =  new RegExp(that.commentPatterns[\"default\"][\"longCommentLineRegExp\"]);"},{"number":176,"code":"                longCommentCloseRegExp =  new RegExp(that.commentPatterns[\"default\"][\"longCommentCloseRegExp\"]);"},{"number":177,"code":"            }"},{"number":178,"code":""},{"number":179,"comment":" Line numbering traditionally starts at 1 (not 0)","code":"           "},{"number":180,"code":"            let lineNumber = 0;"},{"number":181,"comment":" Read each line of the file.","code":"           "},{"number":182,"code":"            lineReader.eachLine(fileName, (line, last) => {"},{"number":183,"code":""},{"number":184,"code":"                let thisLine: ILine = {"},{"number":185,"code":"                    number: lineNumber"},{"number":186,"code":"                };"},{"number":187,"code":"                file.lines.push(thisLine);"},{"number":188,"code":""},{"number":189,"comment":" Logic for long comments, either beginning, or already started.","code":"               "},{"number":190,"code":"                let longCommentOpenMatch;"},{"number":191,"code":"                if (longCommentOpenRegExp) {"},{"number":192,"code":"                    longCommentOpenMatch = XRegExp.exec(line, longCommentOpenRegExp, 0, false);"},{"number":193,"code":"                } else {"},{"number":194,"code":"                    longCommentOpenMatch = false;"},{"number":195,"code":"                }"},{"number":196,"code":""},{"number":197,"comment":" These comments must come at beginning of line.","code":"                if (!insideLongComment && longCommentOpenMatch) {"},{"number":198,"code":"                    insideLongComment = true;"},{"number":199,"code":"                    file.lines[lineNumber].longComment = true;"},{"number":200,"code":"                }"},{"number":201,"code":""},{"number":202,"comment":" We are not inside a long comment - look for a regular comment.","code":"               "},{"number":203,"code":"                if (!insideLongComment) {"},{"number":204,"code":"                    let match = XRegExp.exec(line, commentRegExp, 0, false);"},{"number":205,"code":""},{"number":206,"comment":" Contains a tradition comment","code":"                   "},{"number":207,"code":"                    if (match) {"},{"number":208,"code":""},{"number":209,"code":"                        file.lines[lineNumber].comment = match[1];"},{"number":210,"code":"                        file.lines[lineNumber].code = line.substr(0, match.index - 1);"},{"number":211,"code":""},{"number":212,"code":"                        that.parseComment(file.lines[lineNumber].comment, fileName, lineNumber)"},{"number":213,"code":"                            .then(() => {"},{"number":214,"code":"                                if (last) {"},{"number":215,"code":"                                    that.writeOutFile(file)"},{"number":216,"code":"                                    .then(() => {"},{"number":217,"code":"                                        resolve(null);"},{"number":218,"code":"                                        return false;"},{"number":219,"code":"                                    })"},{"number":220,"code":"                                    .catch((err) => {"},{"number":221,"code":"                                        logger.fatal(err.message);"},{"number":222,"code":"                                    });"},{"number":223,"code":"                                }"},{"number":224,"code":"                            });"},{"number":225,"comment":" Not a comment (code only)","code":"                   "},{"number":226,"code":"                    } else {"},{"number":227,"code":"                        file.lines[lineNumber].code = line;"},{"number":228,"code":"                        if (last) {"},{"number":229,"code":"                            that.writeOutFile(file)"},{"number":230,"code":"                            .then(() => {"},{"number":231,"code":"                                resolve(null);"},{"number":232,"code":"                                return false;"},{"number":233,"code":"                            })"},{"number":234,"code":"                            .catch((err) => {"},{"number":235,"code":"                                logger.fatal(err.message);"},{"number":236,"code":"                            });"},{"number":237,"code":"                        }"},{"number":238,"code":"                    }"},{"number":239,"comment":" Inside a long comment - so the whole thing is a comment","code":"               "},{"number":240,"comment":" If this line contains a long comment closing symbol, then next line isn't long comment.","code":"               "},{"number":241,"code":"                } else {"},{"number":242,"code":"                    if (XRegExp.exec(line, longCommentCloseRegExp, 0)) {"},{"number":243,"code":"                        file.lines[lineNumber].comment = \"\";"},{"number":244,"code":"                        insideLongComment = false;"},{"number":245,"comment":" This long comment hasn't been closed, so we should parse it for links.","code":"                   "},{"number":246,"code":"                    } else {"},{"number":247,"code":""},{"number":248,"code":"                        file.lines[lineNumber].longComment = true;"},{"number":249,"code":""},{"number":250,"code":"                        if (longCommentOpenMatch) {"},{"number":251,"code":"                            file.lines[lineNumber].comment = longCommentOpenMatch[1].trim();"},{"number":252,"code":"                        } else {"},{"number":253,"code":"                            let match = XRegExp.exec(line, longCommentLineRegExp, 0);"},{"number":254,"code":"                            if (match && match[1]) {"},{"number":255,"code":"                              file.lines[lineNumber].comment = match[1].trim();"},{"number":256,"code":"                            } else {"},{"number":257,"comment":" Blank Line inside long comment...","code":"                              file.lines[lineNumber].comment = \"\";"},{"number":258,"code":"                            }"},{"number":259,"code":"                        }"},{"number":260,"code":""},{"number":261,"code":"                        that.parseComment(line, fileName, lineNumber)"},{"number":262,"code":"                        .then(() => {"},{"number":263,"code":"                            if (last) {"},{"number":264,"code":"                                that.writeOutFile(file)"},{"number":265,"code":"                                    .then(() => {"},{"number":266,"code":"                                        resolve(null);"},{"number":267,"code":"                                        return false;"},{"number":268,"code":"                                    })"},{"number":269,"code":"                                    .catch((err) => {"},{"number":270,"code":"                                        logger.fatal(err.message);"},{"number":271,"code":"                                    });"},{"number":272,"code":"                            }"},{"number":273,"code":"                        });"},{"number":274,"code":"                    }"},{"number":275,"code":""},{"number":276,"comment":" If this is the last line, then we can wrap things up.","code":"                   "},{"number":277,"code":"                    if (last) {"},{"number":278,"code":"                        that.writeOutFile(file)"},{"number":279,"code":"                        .then(() => {"},{"number":280,"code":"                            resolve(null);"},{"number":281,"code":"                            return false;"},{"number":282,"code":"                        })"},{"number":283,"code":"                        .catch((err) => {"},{"number":284,"code":"                            logger.fatal(err.message);"},{"number":285,"code":"                        });"},{"number":286,"code":"                    }"},{"number":287,"code":"                }"},{"number":288,"code":""},{"number":289,"code":"                lineNumber++;"},{"number":290,"code":"            });"},{"number":291,"code":"        });"},{"number":292,"code":"    }"},{"number":293,"code":""},{"number":294,"longComment":true,"comment":""},{"number":295,"longComment":true,"comment":"## Write Out File"},{"number":296,"longComment":true,"comment":"Writes out a file map"},{"number":297,"comment":""},{"number":298,"code":"    writeOutFile(file: IFile) {"},{"number":299,"code":"        let that = this;"},{"number":300,"code":"        return Q.Promise<{}>((resolve, reject) => {"},{"number":301,"code":"            let filePathArray = path.join(parseLoc, file.name + \".json\").split(\"/\");"},{"number":302,"code":"            filePathArray.pop();"},{"number":303,"code":"            let filePath = filePathArray.join(\"/\");"},{"number":304,"code":"            mkdirp(filePath, function (err) {"},{"number":305,"code":"                if (err) {"},{"number":306,"code":"                    logger.fatal(err.message);"},{"number":307,"code":"                    reject(err);"},{"number":308,"code":"                }"},{"number":309,"code":"                else {"},{"number":310,"code":"                    logger.debug(\"Saving output for: \" + file.name);"},{"number":311,"code":"                    writeFileSync(path.join(parseLoc, file.name + \".json\"), JSON.stringify(file), { flag: \"w\" });"},{"number":312,"code":"                    resolve(null);"},{"number":313,"code":"                }"},{"number":314,"code":"            });"},{"number":315,"code":"        });"},{"number":316,"code":"    }"},{"number":317,"code":""},{"number":318,"longComment":true,"comment":""},{"number":319,"longComment":true,"comment":"## Parse Comment"},{"number":320,"longComment":true,"comment":"Once a comment is found (see @ParseFile above for example) this will parse"},{"number":321,"longComment":true,"comment":"that commant for anchors. It will add those anchors to the @interfaces/IReferenceCollection"},{"number":322,"longComment":true,"comment":"for the entire project."},{"number":323,"comment":""},{"number":324,"code":"    parseComment(comment: string, fileName: string, lineNumber: number): Q.Promise<{}> {"},{"number":325,"code":"        let that = this;"},{"number":326,"code":"        return Q.Promise<{}>((resolve, reject) => {"},{"number":327,"code":"            let pos = 0;"},{"number":328,"code":"            let match;"},{"number":329,"code":""},{"number":330,"code":"            while (match = XRegExp.exec(comment, that.anchorRegExp, pos, false)) {"},{"number":331,"code":"                logger.debug(\"found anchor: \" + match[1]);"},{"number":332,"code":""},{"number":333,"code":"                let parts = match[1].split(\"/\");"},{"number":334,"code":""},{"number":335,"code":"                that.rootCollection.addAnchorTag(parts, fileName, lineNumber);"},{"number":336,"code":"                resolve(null);"},{"number":337,"code":""},{"number":338,"code":"                pos = match.index + match[0].length;"},{"number":339,"code":"            }"},{"number":340,"code":"            resolve(null);"},{"number":341,"code":"        });"},{"number":342,"code":"    };"},{"number":343,"code":"}"}],"type":"typescript"}