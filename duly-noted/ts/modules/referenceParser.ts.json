{"name":"./ts/modules/referenceParser.ts","lines":[{"number":0,"longComment":true,"comment":""},{"number":1,"longComment":true,"comment":" # !ReferenceParser"},{"number":2,"longComment":true,"comment":" @authors/chris"},{"number":3,"comment":""},{"number":4,"code":""},{"number":5,"code":"import {IReferenceCollection, IAnchor, ReferenceCollection} from \"../classes/referenceCollection\";"},{"number":6,"code":"import {Config, IExternalReference} from \"../classes/IConfig\";"},{"number":7,"code":"import {IFile, ILine} from \"../classes/IFile\";"},{"number":8,"code":"import {getFileType} from \"../helpers/fileType\";"},{"number":9,"code":"import {writeFileSync, mkdirSync, accessSync, F_OK, openSync} from \"fs\";"},{"number":10,"code":"import mkdirp = require(\"mkdirp\");"},{"number":11,"code":"import * as path from \"path\";"},{"number":12,"code":"import XRegExp = require(\"xregexp\");"},{"number":13,"code":"import lineReader = require(\"line-reader\");"},{"number":14,"code":"import Q = require(\"q\");"},{"number":15,"code":"import {doInOrder, doNext} from \"../helpers/helpers\";"},{"number":16,"code":""},{"number":17,"code":"import log4js = require(\"log4js\");"},{"number":18,"code":"let logger = log4js.getLogger(\"duly-noted::ReferenceParser\");"},{"number":19,"code":""},{"number":20,"code":"export interface IReferenceParser {"},{"number":21,"code":"    files: string[];"},{"number":22,"code":"    parse(): any;"},{"number":23,"code":"}"},{"number":24,"code":""},{"number":25,"code":"export const parseLoc = \"duly-noted\";"},{"number":26,"code":""},{"number":27,"code":"export class ReferenceParser implements IReferenceParser {"},{"number":28,"code":"    files: string[];"},{"number":29,"code":"    rootCollection: IReferenceCollection;"},{"number":30,"code":"    anchorRegExp: RegExp;"},{"number":31,"code":"    commentRegExp: RegExp;"},{"number":32,"code":"    longCommentOpenRegExp: RegExp;"},{"number":33,"code":"    longCommentLineRegExp: RegExp;"},{"number":34,"code":"    longCommentCloseRegExp: RegExp;"},{"number":35,"code":"    externalReferences: IExternalReference[];"},{"number":36,"code":""},{"number":37,"code":"    constructor(config: Config) {"},{"number":38,"code":"        logger.debug(\"ready\");"},{"number":39,"code":"        this.files = config.files;"},{"number":40,"code":"        this.rootCollection = new ReferenceCollection(parseLoc);"},{"number":41,"code":"        this.anchorRegExp = new RegExp(config.anchorRegExp);"},{"number":42,"code":"        this.commentRegExp = new RegExp(config.commentRegExp);"},{"number":43,"code":"        this.longCommentOpenRegExp = new RegExp(config.longCommentOpenRegExp);"},{"number":44,"code":"        this.longCommentLineRegExp = new RegExp(config.longCommentLineRegExp);"},{"number":45,"code":"        this.longCommentCloseRegExp = new RegExp(config.longCommentCloseRegExp);"},{"number":46,"code":"        this.externalReferences = config.externalReferences;"},{"number":47,"code":"    }"},{"number":48,"code":""},{"number":49,"code":"    public parse(): Q.Promise<IReferenceCollection> {"},{"number":50,"code":"        let that = this;"},{"number":51,"code":"        return Q.Promise<IReferenceCollection>((resolve, reject) => {"},{"number":52,"code":"            logger.info(\"Starting parse actions for \" + that.files.length + \" files.\");"},{"number":53,"code":""},{"number":54,"code":"            let parseActions = [];"},{"number":55,"code":""},{"number":56,"code":"            for (let i = 0; i < that.files.length; i++) {"},{"number":57,"code":"                let fileName = that.files[i].split(\".\");"},{"number":58,"code":"                let extension = fileName[fileName.length - 1];"},{"number":59,"code":"                if (extension === \"md\") {"},{"number":60,"code":"                    parseActions.push(that.parseAsMarkdown(that.files[i]));"},{"number":61,"code":"                } else {"},{"number":62,"code":"                    parseActions.push(that.parseFile(that.files[i]));"},{"number":63,"code":"                }"},{"number":64,"code":"            }"},{"number":65,"code":""},{"number":66,"code":"            Q.all(parseActions)"},{"number":67,"code":"            .then(() => {"},{"number":68,"code":"                logger.info(\"Saving out internalReferences.json\");"},{"number":69,"code":"                writeFileSync(path.join(parseLoc, \"internalReferences.json\"), JSON.stringify(that.rootCollection), { flag: \"w\" });"},{"number":70,"code":"                writeFileSync(path.join(parseLoc, \"externalReferences.json\"), JSON.stringify(that.externalReferences), { flag: \"w\" });"},{"number":71,"code":"                resolve(that.rootCollection);"},{"number":72,"code":"            });"},{"number":73,"code":"        });"},{"number":74,"code":"    }"},{"number":75,"code":""},{"number":76,"code":"    parseAsMarkdown(fileName: string): Q.Promise<{}> {"},{"number":77,"code":"        logger.info(\"parsing markdown file: \" + fileName);"},{"number":78,"code":"        let that = this;"},{"number":79,"code":"        let file: IFile = {"},{"number":80,"code":"            name: fileName,"},{"number":81,"code":"            type: \"markdown\","},{"number":82,"code":"            lines: []"},{"number":83,"code":"        };"},{"number":84,"comment":" Line numbering traditionally starts at 1","code":"        let lineNumber = 0;"},{"number":85,"code":"        return Q.Promise((resolve, reject) => {"},{"number":86,"code":"            lineReader.eachLine(fileName, (line, last) => {"},{"number":87,"code":"                let thisLine: ILine = {"},{"number":88,"code":"                    number: lineNumber"},{"number":89,"code":"                };"},{"number":90,"code":""},{"number":91,"code":"                file.lines.push(thisLine);"},{"number":92,"comment":" In Markdown all lines are considered comments","code":"                file.lines[lineNumber].comment = line;"},{"number":93,"code":""},{"number":94,"code":"                that.parseComment(file.lines[lineNumber].comment, fileName, lineNumber)"},{"number":95,"code":"                .then(() => {"},{"number":96,"code":"                    if (last) {"},{"number":97,"code":"                        that.writeOutFile(file)"},{"number":98,"code":"                        .then(() => {"},{"number":99,"code":"                            resolve(null);"},{"number":100,"code":"                            return false;"},{"number":101,"code":"                        })"},{"number":102,"code":"                        .catch((err) => {"},{"number":103,"code":"                            logger.fatal(err.message);"},{"number":104,"code":"                        });"},{"number":105,"code":"                    }"},{"number":106,"code":"                });"},{"number":107,"code":""},{"number":108,"code":"                lineNumber++;"},{"number":109,"code":"            });"},{"number":110,"code":"        });"},{"number":111,"code":"    }"},{"number":112,"code":""},{"number":113,"code":"    parseFile(fileName: string): Q.Promise<{}> {"},{"number":114,"code":"        logger.info(\"parsing code file: \" + fileName);"},{"number":115,"code":"        let that = this;"},{"number":116,"code":"        let file: IFile;"},{"number":117,"code":"        let insideLongComment = false;"},{"number":118,"code":"        return Q.Promise((resolve, reject) => {"},{"number":119,"comment":" read all lines:","code":"           "},{"number":120,"code":"            logger.info(\"Working on file: \" + fileName);"},{"number":121,"code":"            file = {"},{"number":122,"code":"                name: fileName,"},{"number":123,"code":"                lines: [],"},{"number":124,"code":"                type: getFileType(fileName)"},{"number":125,"code":"            };"},{"number":126,"code":""},{"number":127,"comment":" Line numbering traditionally starts at 1","code":"            let lineNumber = 0;"},{"number":128,"code":"            lineReader.eachLine(fileName, (line, last) => {"},{"number":129,"code":""},{"number":130,"code":"                let thisLine: ILine = {"},{"number":131,"code":"                    number: lineNumber"},{"number":132,"code":"                };"},{"number":133,"code":"                file.lines.push(thisLine);"},{"number":134,"code":""},{"number":135,"code":"                let longCommentOpenMatch = XRegExp.exec(line, that.longCommentOpenRegExp, 0, false);"},{"number":136,"code":""},{"number":137,"comment":" These comments must come at beginning of line.","code":"                if (!insideLongComment && longCommentOpenMatch) {"},{"number":138,"code":"                    insideLongComment = true;"},{"number":139,"code":"                    file.lines[lineNumber].longComment = true;"},{"number":140,"code":"                }"},{"number":141,"code":""},{"number":142,"comment":" Not inside a long comment - look for a regular comment.","code":"               "},{"number":143,"code":"                if (!insideLongComment) {"},{"number":144,"code":"                    let match = XRegExp.exec(line, that.commentRegExp, 0, false);"},{"number":145,"code":""},{"number":146,"comment":" Contains a tradition comment","code":"                   "},{"number":147,"code":"                    if (match) {"},{"number":148,"code":""},{"number":149,"code":"                        file.lines[lineNumber].comment = match[1];"},{"number":150,"code":"                        file.lines[lineNumber].code = line.substr(0, match.index - 1);"},{"number":151,"code":""},{"number":152,"code":"                        that.parseComment(file.lines[lineNumber].comment, fileName, lineNumber)"},{"number":153,"code":"                            .then(() => {"},{"number":154,"code":"                                if (last) {"},{"number":155,"code":"                                    that.writeOutFile(file)"},{"number":156,"code":"                                    .then(() => {"},{"number":157,"code":"                                        resolve(null);"},{"number":158,"code":"                                        return false;"},{"number":159,"code":"                                    })"},{"number":160,"code":"                                    .catch((err) => {"},{"number":161,"code":"                                        logger.fatal(err.message);"},{"number":162,"code":"                                    });"},{"number":163,"code":"                                }"},{"number":164,"code":"                            });"},{"number":165,"comment":" Not a comment (code only)","code":"                       "},{"number":166,"code":"                    } else {"},{"number":167,"code":"                        file.lines[lineNumber].code = line;"},{"number":168,"code":"                        if (last) {"},{"number":169,"code":"                            that.writeOutFile(file)"},{"number":170,"code":"                            .then(() => {"},{"number":171,"code":"                                resolve(null);"},{"number":172,"code":"                                return false;"},{"number":173,"code":"                            })"},{"number":174,"code":"                            .catch((err) => {"},{"number":175,"code":"                                logger.fatal(err.message);"},{"number":176,"code":"                            });"},{"number":177,"code":"                        }"},{"number":178,"code":"                    }"},{"number":179,"comment":" Inside a long comment - so the whole thing is a comment","code":"                } else {"},{"number":180,"comment":" If this line contains a long comment closing symbol, then next line isn't long comment.","code":"                   "},{"number":181,"comment":" let longCommentEnd = line.search(that.longCommentCloseRegExp);","code":"                   "},{"number":182,"code":"                    if (XRegExp.exec(line, this.longCommentCloseRegExp, 0)) {"},{"number":183,"code":"                        file.lines[lineNumber].comment = \"\";"},{"number":184,"code":"                        insideLongComment = false;"},{"number":185,"code":"                    } else {"},{"number":186,"code":""},{"number":187,"code":"                        file.lines[lineNumber].longComment = true;"},{"number":188,"code":""},{"number":189,"code":"                        if (longCommentOpenMatch) {"},{"number":190,"code":"                            file.lines[lineNumber].comment = longCommentOpenMatch[1].trim();"},{"number":191,"code":"                        } else {"},{"number":192,"code":"                            let match = XRegExp.exec(line, this.longCommentLineRegExp, 0);"},{"number":193,"code":"                            file.lines[lineNumber].comment =  \" \" + match[1].trim() || line;"},{"number":194,"code":"                        }"},{"number":195,"code":""},{"number":196,"code":"                        that.parseComment(line, fileName, lineNumber)"},{"number":197,"code":"                        .then(() => {"},{"number":198,"code":"                            if (last) {"},{"number":199,"code":"                                that.writeOutFile(file)"},{"number":200,"code":"                                    .then(() => {"},{"number":201,"code":"                                        resolve(null);"},{"number":202,"code":"                                        return false;"},{"number":203,"code":"                                    })"},{"number":204,"code":"                                    .catch((err) => {"},{"number":205,"code":"                                        logger.fatal(err.message);"},{"number":206,"code":"                                    });"},{"number":207,"code":"                            }"},{"number":208,"code":"                        });"},{"number":209,"code":"                    }"},{"number":210,"code":""},{"number":211,"code":"                    if (last) {"},{"number":212,"code":"                        that.writeOutFile(file)"},{"number":213,"code":"                        .then(() => {"},{"number":214,"code":"                            resolve(null);"},{"number":215,"code":"                            return false;"},{"number":216,"code":"                        })"},{"number":217,"code":"                        .catch((err) => {"},{"number":218,"code":"                            logger.fatal(err.message);"},{"number":219,"code":"                        });"},{"number":220,"code":"                    }"},{"number":221,"code":"                }"},{"number":222,"code":""},{"number":223,"code":"                lineNumber++;"},{"number":224,"code":"            });"},{"number":225,"code":"        });"},{"number":226,"code":"    }"},{"number":227,"code":""},{"number":228,"code":"    writeOutFile(file: IFile) {"},{"number":229,"code":"        let that = this;"},{"number":230,"code":"        return Q.Promise<{}>((resolve, reject) => {"},{"number":231,"code":"            let filePathArray = path.join(parseLoc, file.name + \".json\").split(\"/\");"},{"number":232,"code":"            filePathArray.pop();"},{"number":233,"code":"            let filePath = filePathArray.join(\"/\");"},{"number":234,"code":"            mkdirp(filePath, function (err) {"},{"number":235,"code":"                if (err) {"},{"number":236,"code":"                    logger.fatal(err.message);"},{"number":237,"code":"                    reject(err);"},{"number":238,"code":"                }"},{"number":239,"code":"                else {"},{"number":240,"code":"                    logger.info(\"Saving output for: \" + file.name);"},{"number":241,"code":"                    writeFileSync(path.join(parseLoc, file.name + \".json\"), JSON.stringify(file), { flag: \"w\" });"},{"number":242,"code":"                    resolve(null);"},{"number":243,"code":"                }"},{"number":244,"code":"            });"},{"number":245,"code":"        });"},{"number":246,"code":"    }"},{"number":247,"code":""},{"number":248,"code":"    parseLine(line: string, fileName: string, lineNumber: number, insideLongComment: boolean): Q.Promise<{}> {"},{"number":249,"code":"        let that = this;"},{"number":250,"code":"        return Q.Promise<string[]>((resolve, reject) => {"},{"number":251,"code":"            let commentStart = line.search(that.commentRegExp);"},{"number":252,"code":"        });"},{"number":253,"code":"    }"},{"number":254,"code":""},{"number":255,"code":"    parseComment(comment: string, fileName: string, lineNumber: number): Q.Promise<{}> {"},{"number":256,"code":"        let that = this;"},{"number":257,"code":"        return Q.Promise<{}>((resolve, reject) => {"},{"number":258,"code":"            let pos = 0;"},{"number":259,"code":"            let match;"},{"number":260,"code":""},{"number":261,"code":"            while (match = XRegExp.exec(comment, that.anchorRegExp, pos, false)) {"},{"number":262,"code":"                logger.debug(\"found anchor: \" + match[1]);"},{"number":263,"code":""},{"number":264,"code":"                let parts = match[1].split(\"/\");"},{"number":265,"code":""},{"number":266,"code":"                that.rootCollection.addAnchorTag(parts, fileName, lineNumber);"},{"number":267,"code":"                resolve(null);"},{"number":268,"code":""},{"number":269,"code":"                pos = match.index + match[0].length;"},{"number":270,"code":"            }"},{"number":271,"code":"            resolve(null);"},{"number":272,"code":"        });"},{"number":273,"code":"    };"},{"number":274,"code":"}"}],"type":"typescript"}