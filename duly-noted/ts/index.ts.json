{"name":"./ts/index.ts","lines":[{"number":0,"longComment":true,"comment":""},{"number":1,"longComment":true,"comment":" # !Index"},{"number":2,"longComment":true,"comment":" @authors/chris"},{"number":3,"longComment":true,"comment":" @license"},{"number":4,"longComment":true,"comment":" "},{"number":5,"longComment":true,"comment":" This is the entry file to Duly Noted"},{"number":6,"comment":""},{"number":7,"code":"import {IConfig} from \"./classes/IConfig\";"},{"number":8,"code":"import {ReferenceParser} from \"./modules/referenceParser\";"},{"number":9,"code":"import parseArgs = require(\"minimist\");"},{"number":10,"code":"import _ = require(\"underscore\");"},{"number":11,"code":"import * as path from \"path\";"},{"number":12,"code":"import glob = require(\"glob\");"},{"number":13,"code":"import Q = require(\"q\");"},{"number":14,"code":"import {MarkdownGenerator} from \"./generators/markdownGenerator\";"},{"number":15,"code":"import {HtmlGenerator} from \"./generators/Htmlgenerator\";"},{"number":16,"code":"import log4js = require(\"log4js\");"},{"number":17,"code":"let logger = log4js.getLogger(\"duly-noted::run\");"},{"number":18,"code":""},{"number":19,"code":""},{"number":20,"longComment":true,"comment":""},{"number":21,"longComment":true,"comment":" ## Run"},{"number":22,"longComment":true,"comment":" "},{"number":23,"longComment":true,"comment":" Runs duly-typed using taking the consuing the config file (see @IConfig) found as `/duly-noted.json`"},{"number":24,"longComment":true,"comment":" Basic code flow is:"},{"number":25,"longComment":true,"comment":" 1. parse the cofiguration options"},{"number":26,"longComment":true,"comment":" 2. get the files, and pass those to the @ReferenceParser"},{"number":27,"longComment":true,"comment":" 3. output the reponse to either/both @Htmlgenerator or @MarkdownGenerator"},{"number":28,"comment":""},{"number":29,"code":"export function run () {"},{"number":30,"code":"    logger.info(\"Welcome to Duly Noted.\");"},{"number":31,"code":"    let args = parseArgs(process.argv.slice(2));"},{"number":32,"code":"    let config: IConfig;"},{"number":33,"code":""},{"number":34,"comment":" !TODO/config > This needs more flexible support for command line options","code":"   "},{"number":35,"code":"     if (args[\"c\"]) {"},{"number":36,"code":"        config = require(args[\"c\"]);"},{"number":37,"code":"     } else {"},{"number":38,"code":"        config = require(process.cwd() + \"/duly-noted.json\");"},{"number":39,"code":"     }"},{"number":40,"code":""},{"number":41,"code":"     let getFiles: Q.IPromise<string[]>[] = [];"},{"number":42,"code":""},{"number":43,"code":"     for (let i = 0; i < config.files.length; i++) {"},{"number":44,"code":"        getFiles.push(getFilesFromGlob(config.files[i]));"},{"number":45,"code":"     }"},{"number":46,"code":""},{"number":47,"code":"     Q.all(getFiles)"},{"number":48,"code":"     .then((results) => {"},{"number":49,"code":"         let files = _.flatten(results);"},{"number":50,"code":"         let referenceParser = new ReferenceParser(config);"},{"number":51,"code":""},{"number":52,"code":"         referenceParser.parse()"},{"number":53,"code":"         .then((response) => {"},{"number":54,"comment":" !TODO/set-generators > This needs more flexible support selecting the generators from the command line / config","code":"            "},{"number":55,"code":"             logger.info(\"parsing complete, beginning export of HTML\");"},{"number":56,"comment":" new HtmlGenerator(config).generate();","code":"            "},{"number":57,"code":"             new MarkdownGenerator(config).generate(true);"},{"number":58,"code":"         })"},{"number":59,"code":"         .catch( (err: Error) => {"},{"number":60,"comment":" !TODO/errors > An overall stratefy is needed to identify errors.","code":"            "},{"number":61,"code":"             logger.error(err.message + err.stack);"},{"number":62,"code":"         });"},{"number":63,"code":"     });"},{"number":64,"code":"}"},{"number":65,"code":""},{"number":66,"longComment":true,"comment":""},{"number":67,"longComment":true,"comment":" ## Get Files from Glob"},{"number":68,"longComment":true,"comment":" This is a simple helper to get a set of files from a glob."},{"number":69,"comment":""},{"number":70,"code":"function getFilesFromGlob(globString: string): Q.Promise<string[]> {"},{"number":71,"code":"    return Q.Promise<string[]>((resolve, reject) => {"},{"number":72,"code":"        glob(globString, (err, files: string[]) => {"},{"number":73,"code":"            if (err) reject(err);"},{"number":74,"code":"            resolve(files);"},{"number":75,"code":"        });"},{"number":76,"code":"    });"},{"number":77,"code":"}"}],"type":"typescript"}