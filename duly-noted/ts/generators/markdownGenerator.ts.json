{"name":"./ts/generators/markdownGenerator.ts","lines":[{"number":0,"longComment":true,"comment":""},{"number":1,"longComment":true,"comment":" # !MarkdownGenerator"},{"number":2,"longComment":true,"comment":" @authors/chris"},{"number":3,"longComment":true,"comment":" @license"},{"number":4,"comment":""},{"number":5,"code":""},{"number":6,"code":"import {IReferenceCollection, IAnchor, ITag, ReferenceCollection} from \"../classes/referenceCollection\";"},{"number":7,"code":"import {parseLoc} from \"../modules/referenceParser\";"},{"number":8,"code":"import {IConfig, IExternalReference} from \"../classes/IConfig\";"},{"number":9,"code":"import {readFiles, files} from \"node-dir\";"},{"number":10,"code":"import {IFile, ILine} from \"../classes/IFile\";"},{"number":11,"code":"import XRegExp = require(\"xregexp\");"},{"number":12,"code":"import {writeFileSync, mkdirSync, accessSync, F_OK, unlinkSync, readFileSync} from \"fs\";"},{"number":13,"code":"import mkdirp = require(\"mkdirp\");"},{"number":14,"code":"import * as path from \"path\";"},{"number":15,"code":"import _ = require(\"underscore\");"},{"number":16,"code":"import lineReader = require(\"line-reader\");"},{"number":17,"code":""},{"number":18,"code":"import log4js = require(\"log4js\");"},{"number":19,"code":"let logger = log4js.getLogger(\"duly-noted::MarkdownGenerator\");"},{"number":20,"code":""},{"number":21,"code":""},{"number":22,"longComment":true,"comment":""},{"number":23,"longComment":true,"comment":" !interfaces/IMarkdownGenerator"},{"number":24,"comment":""},{"number":25,"code":"export interface IMarkdownGenerator {"},{"number":26,"code":"    generate(): void;"},{"number":27,"code":"}"},{"number":28,"code":""},{"number":29,"longComment":true,"comment":""},{"number":30,"longComment":true,"comment":" ## !classes/MarkdownGenerator"},{"number":31,"comment":""},{"number":32,"code":"export class MarkdownGenerator implements IMarkdownGenerator {"},{"number":33,"code":"    outputDir: string;"},{"number":34,"code":"    indexFile: string;"},{"number":35,"code":"    externalReferences: IExternalReference[];"},{"number":36,"code":"    anchorRegExp: RegExp;"},{"number":37,"code":"    linkRegExp: RegExp;"},{"number":38,"code":"    referenceCollection: ReferenceCollection;"},{"number":39,"code":"    tags: ITag[] = [];"},{"number":40,"code":"    readme: string;"},{"number":41,"code":"    projectName: string;"},{"number":42,"code":"    outputFiles: string[] = [];"},{"number":43,"code":""},{"number":44,"longComment":true,"comment":""},{"number":45,"longComment":true,"comment":" ### Creates an instance of @classes/MarkdownGenerator"},{"number":46,"comment":""},{"number":47,"code":"    constructor(config: IConfig, logLevel?: string) {"},{"number":48,"code":"        logger.setLevel(logLevel || \"DEBUG\");"},{"number":49,"code":"        this.outputDir = config.outputDir;"},{"number":50,"code":"        this.externalReferences = JSON.parse(readFileSync(path.join(parseLoc, \"externalReferences.json\")).toString());"},{"number":51,"code":"        this.anchorRegExp = new RegExp(config.anchorRegExp);"},{"number":52,"code":"        this.linkRegExp = new RegExp(config.linkRegExp);"},{"number":53,"code":"        this.referenceCollection = new ReferenceCollection(\"\").inflate(JSON.parse(readFileSync(path.join(parseLoc, \"internalReferences.json\")).toString()));"},{"number":54,"code":"        this.tags = this.referenceCollection.getAllTags();"},{"number":55,"code":"        this.readme = config.readme;"},{"number":56,"code":"        this.projectName = config.projectName;"},{"number":57,"code":"        this.indexFile = config.indexFile;"},{"number":58,"code":"    }"},{"number":59,"code":""},{"number":60,"longComment":true,"comment":""},{"number":61,"longComment":true,"comment":" ## Generate Markdown Docs"},{"number":62,"longComment":true,"comment":" Creates Markdown docs for a set of file maps and reference maps set on @classes/MarkdownGenerator construction."},{"number":63,"comment":""},{"number":64,"code":"    public generate(): void {"},{"number":65,"code":"        logger.info(\"Generating Markdown Docs.\");"},{"number":66,"code":"        let that = this;"},{"number":67,"code":"        this.outputFiles = [];"},{"number":68,"code":"        readFiles(parseLoc, {match: /.json$/, exclude: /internalReferences.json|externalReferences.json/, recursive: true}, (err, content, next) => {"},{"number":69,"code":"            that.proccessFile(err, content, next, that.outputDir);"},{"number":70,"code":"        }, (err, files) => {"},{"number":71,"code":"            let readme = \"\";"},{"number":72,"code":"            let i = 1;"},{"number":73,"code":"            lineReader.eachLine(that.readme, (line, last) => {"},{"number":74,"code":"                let newLine = line;"},{"number":75,"code":"                newLine = that.replaceExternalLinks(newLine, that.readme, i);"},{"number":76,"code":"                newLine = that.replaceInternalLinks(newLine, that.readme, i);"},{"number":77,"code":"                readme +=  \"\\n\" + newLine;"},{"number":78,"code":"                i++;"},{"number":79,"code":"            }, () => {"},{"number":80,"code":"                that.generateIndexPage(readme);"},{"number":81,"code":"            });"},{"number":82,"code":"        });"},{"number":83,"code":"    }"},{"number":84,"code":""},{"number":85,"longComment":true,"comment":""},{"number":86,"longComment":true,"comment":" ## Process Files"},{"number":87,"longComment":true,"comment":" Processes the file map for a file, making output decisions based on"},{"number":88,"longComment":true,"comment":" code, comment, long comment presence"},{"number":89,"comment":""},{"number":90,"code":"    proccessFile(err: Error, content: string, next: Function, outputDir: string): void {"},{"number":91,"code":"        let file: IFile = JSON.parse(content);"},{"number":92,"code":"        let that = this;"},{"number":93,"code":"        logger.debug(\"Processing \" + file.name);"},{"number":94,"code":""},{"number":95,"code":"        if (err) {"},{"number":96,"code":"            logger.error(err.message);"},{"number":97,"code":"        } else {"},{"number":98,"code":"            let file: IFile = JSON.parse(content);"},{"number":99,"code":""},{"number":100,"comment":" Transform the file name into name that avoids extra extensions see @issues/3","code":"           "},{"number":101,"code":"            let safeFileName = file.name.replace(/.([^.]*)$/, \"_\" + \"$1\");"},{"number":102,"code":"            logger.debug(\"Safe Name \" + safeFileName);"},{"number":103,"code":"            let output: string = \"\";"},{"number":104,"code":"            let inCodeBlock = false;"},{"number":105,"code":""},{"number":106,"code":"            for (let i = 0; i < file.lines.length; i++) {"},{"number":107,"code":"                if (typeof(file.lines[i].comment) === \"string\" && file.lines[i].comment !== \"\" && file.lines[i].comment !== null) {"},{"number":108,"code":"                    file.lines[i].comment = this.replaceAnchors(file.lines[i].comment, safeFileName, i);"},{"number":109,"code":"                    file.lines[i].comment = this.replaceExternalLinks(file.lines[i].comment, safeFileName, i);"},{"number":110,"code":"                    file.lines[i].comment = this.replaceInternalLinks(file.lines[i].comment, safeFileName, i);"},{"number":111,"code":"                }"},{"number":112,"code":"            }"},{"number":113,"code":""},{"number":114,"code":"            for (let i = 0; i < file.lines.length; i++) {"},{"number":115,"code":""},{"number":116,"comment":" Comment","code":"               "},{"number":117,"code":"                if (typeof(file.lines[i].comment) === \"string\" && file.lines[i].comment !== \"\" && file.lines[i].comment !== null) {"},{"number":118,"code":"                    if (inCodeBlock) {"},{"number":119,"comment":" Close the current block of code. ","code":"                        output += \"```\" + \"\\n\";"},{"number":120,"code":"                        inCodeBlock = false;"},{"number":121,"code":"                    }"},{"number":122,"code":""},{"number":123,"code":"                    output += file.lines[i].comment + \"\\n\" + \"\\n\";"},{"number":124,"code":"                }"},{"number":125,"code":""},{"number":126,"comment":" Code","code":"               "},{"number":127,"code":"                if (typeof(file.lines[i].code) === \"string\" && file.lines[i].code !== \"\" && file.lines[i].code !== null) {"},{"number":128,"code":"                    if (!inCodeBlock) {"},{"number":129,"comment":" Open new code block. ","code":"                        output += \"```\" + file.type +  \"\\n\";"},{"number":130,"code":"                        inCodeBlock = true;"},{"number":131,"code":"                    }"},{"number":132,"code":"                    output += file.lines[i].code + \"\\n\";"},{"number":133,"code":"                }"},{"number":134,"code":"            }"},{"number":135,"code":""},{"number":136,"code":"            if (inCodeBlock) {"},{"number":137,"comment":" Close the current block of code. ","code":"                output += \"```\" + \"\\n\";"},{"number":138,"code":"                inCodeBlock = false;"},{"number":139,"code":"            }"},{"number":140,"code":""},{"number":141,"code":"            let filePathArray = path.join(outputDir, safeFileName + \".md\").split(\"/\");"},{"number":142,"code":"            filePathArray.pop();"},{"number":143,"code":"            let filePath = filePathArray.join(\"/\");"},{"number":144,"code":""},{"number":145,"code":"            mkdirp(filePath, function (err) {"},{"number":146,"code":"                if (err) {"},{"number":147,"code":"                    logger.fatal(err.message);"},{"number":148,"code":"                }"},{"number":149,"code":"                else {"},{"number":150,"code":"                    let fileName = path.join(outputDir, safeFileName + \".md\");"},{"number":151,"code":"                    that.outputFiles.push(fileName);"},{"number":152,"code":"                    logger.debug(\"Saving output for \" + file.type + \" file \" + safeFileName + \" as \" + fileName);"},{"number":153,"code":"                    writeFileSync(fileName, output, { flag: \"w\" });"},{"number":154,"code":"                }"},{"number":155,"code":"            });"},{"number":156,"code":""},{"number":157,"code":"            next();"},{"number":158,"code":"        }"},{"number":159,"code":"    }"},{"number":160,"code":""},{"number":161,"longComment":true,"comment":""},{"number":162,"longComment":true,"comment":" ## Replace Anchors"},{"number":163,"longComment":true,"comment":" Processes a comment line, replacing anchors with markdown anchor link tags"},{"number":164,"comment":""},{"number":165,"code":"    replaceAnchors(comment: string,  fileName: string, line: number) {"},{"number":166,"code":"        let pos = 0;"},{"number":167,"code":"        let match;"},{"number":168,"code":"        let newComment: string = comment;"},{"number":169,"comment":" Look at the line for anchors - replace them with links. ","code":"       "},{"number":170,"code":"        while (match = XRegExp.exec(newComment, this.anchorRegExp, pos, false)) {"},{"number":171,"code":"            newComment =  newComment.substr(0, match.index) +"},{"number":172,"code":"            \"[\" + match[1] + \"](#\" + match[1] + \")\" +"},{"number":173,"code":"            newComment.substr(match.index + match[0].length);"},{"number":174,"code":""},{"number":175,"code":"            pos = match.index + match[0].length;"},{"number":176,"code":"        }"},{"number":177,"code":""},{"number":178,"code":"        return newComment;"},{"number":179,"code":"    }"},{"number":180,"code":""},{"number":181,"longComment":true,"comment":""},{"number":182,"longComment":true,"comment":" ## Replace Links"},{"number":183,"longComment":true,"comment":" > Run this AFTER external link replacement to ensure warning accuracy"},{"number":184,"longComment":true,"comment":" Processes a comment line, replacing links with markdown links"},{"number":185,"comment":""},{"number":186,"code":"    replaceInternalLinks(comment: string, fileName: string, line: number) {"},{"number":187,"code":"        let pos = 0;"},{"number":188,"code":"        let match;"},{"number":189,"code":"        let newComment: string = comment;"},{"number":190,"code":""},{"number":191,"code":"        let linkPrefix = this.getLinkPrefix(fileName);"},{"number":192,"code":""},{"number":193,"comment":" Look at the line for anchors - replace them with links. ","code":"       "},{"number":194,"code":"        while (match = XRegExp.exec(newComment, this.linkRegExp, pos, false)) {"},{"number":195,"code":"            let tag =  _.findWhere(this.tags, {anchor: match[1]});"},{"number":196,"code":"            if (!tag) {"},{"number":197,"code":"                logger.warn(\"link: \" + match[1] + \" in \" + fileName + \":\" + line + \" does not have a cooresponding anchor, so link cannot be created.\");"},{"number":198,"code":"            } else {"},{"number":199,"code":"                logger.debug(\"found internal link: \" + match[1] + \" \" + tag.path);"},{"number":200,"code":"                newComment =  comment.substr(0, match.index) +"},{"number":201,"code":"                \" [\" + match[1] + \"](\" + linkPrefix + tag.path + \".md#\" + match[1] + \") \" +"},{"number":202,"code":"                newComment.substr(match.index + match[0].length);"},{"number":203,"code":"            }"},{"number":204,"code":"            pos = match.index + match[0].length;"},{"number":205,"code":"        }"},{"number":206,"code":""},{"number":207,"code":"        return newComment;"},{"number":208,"code":"    }"},{"number":209,"code":""},{"number":210,"longComment":true,"comment":""},{"number":211,"longComment":true,"comment":" ## Replace External Links"},{"number":212,"longComment":true,"comment":" > Run this BEFORE internal link replacement"},{"number":213,"longComment":true,"comment":" Processes a comment line, replacing links with markdown links to external urls"},{"number":214,"comment":""},{"number":215,"code":"    replaceExternalLinks(comment: string, fileName: string, line: number) {"},{"number":216,"code":"        let pos = 0;"},{"number":217,"code":"        let match;"},{"number":218,"code":"        let newComment: string = comment;"},{"number":219,"code":""},{"number":220,"comment":" Look at the line for external references - replace them with links. ","code":"       "},{"number":221,"code":"        while (match = XRegExp.exec(newComment, this.linkRegExp, pos, false)) {"},{"number":222,"code":"            let tagArray = match[1].split(\"/\");"},{"number":223,"code":"            let tag =  _.findWhere(this.externalReferences, {anchor: tagArray[0]});"},{"number":224,"code":""},{"number":225,"code":"            if (tag) {"},{"number":226,"code":"                logger.debug(\"found external link: \" + match[1]);"},{"number":227,"code":"                for (let i = 1; i < tagArray.length; i++) {"},{"number":228,"code":"                    tag.path = tag.path.replace(\"::\", tagArray[i]);"},{"number":229,"code":"                }"},{"number":230,"code":""},{"number":231,"code":"                newComment =  comment.substr(0, match.index - 1) +"},{"number":232,"code":"                \" [\" + match[1] + \"](\" + tag.path + \") \" +"},{"number":233,"code":"                newComment.substr(match.index + match[0].length);"},{"number":234,"code":"            }"},{"number":235,"code":""},{"number":236,"code":"            pos = match.index + match[0].length;"},{"number":237,"code":"        }"},{"number":238,"code":"        return newComment;"},{"number":239,"code":"    }"},{"number":240,"code":""},{"number":241,"longComment":true,"comment":""},{"number":242,"longComment":true,"comment":" ## Generates the \"Index Page\""},{"number":243,"longComment":true,"comment":" This generates the index page, listing all the link collections,"},{"number":244,"longComment":true,"comment":" and sucks in the README."},{"number":245,"comment":""},{"number":246,"code":"    generateIndexPage(readmeText?): void {"},{"number":247,"code":"        logger.info(\"generating Duly Noted Index file.\");"},{"number":248,"code":"        let that = this;"},{"number":249,"code":""},{"number":250,"code":"        let outputMap = {"},{"number":251,"code":"            project: this.projectName,"},{"number":252,"code":"            collections: [],"},{"number":253,"code":"            files: this.outputFiles,"},{"number":254,"code":"            readme: readmeText"},{"number":255,"code":"        };"},{"number":256,"code":""},{"number":257,"code":"        let collections = that.referenceCollection.getTagsByCollection();"},{"number":258,"code":""},{"number":259,"code":"        for (let i = 0; i < collections.length; i++) {"},{"number":260,"code":"            let anchors = _.clone(collections[i].anchors);"},{"number":261,"code":"            for (let x = 0; x < anchors.length; x++) {"},{"number":262,"code":"                let linkPrefix = that.getLinkPrefix(anchors[x].path);"},{"number":263,"code":"                anchors[x].path = anchors[x].path + \".md#\" + anchors[x].linkStub;"},{"number":264,"code":"            }"},{"number":265,"code":""},{"number":266,"code":"            let name = collections[i].name.split(\"/\");"},{"number":267,"code":"            name.shift();"},{"number":268,"code":"            name.shift();"},{"number":269,"code":"            name = name.join(\"/\");"},{"number":270,"code":""},{"number":271,"code":"            outputMap.collections.push({"},{"number":272,"code":"                name: name,"},{"number":273,"code":"                anchors: anchors"},{"number":274,"code":"            });"},{"number":275,"code":"        }"},{"number":276,"code":""},{"number":277,"code":"        let md = \"# \" + this.projectName + \" documentation \\n\";"},{"number":278,"code":""},{"number":279,"code":"        md += \"### Collections \\n\";"},{"number":280,"code":"        for (let i = 0; i < outputMap.collections.length; i++) {"},{"number":281,"code":"           md += \"\\n#### \" + outputMap.collections[i].name + \" \\n\";"},{"number":282,"code":""},{"number":283,"code":"           for (let x = 0; x < outputMap.collections[i].anchors.length; x++) {"},{"number":284,"code":"               md += \"* [\" + outputMap.collections[i].anchors[x].anchor + \"]\" + \"(\" + outputMap.collections[i].anchors[x].path + \") \\n\";"},{"number":285,"code":"           }"},{"number":286,"code":"        }"},{"number":287,"code":""},{"number":288,"code":"        md += \"\\n------------------------------ \\n\";"},{"number":289,"code":"        md += \"\\n### Files \\n\";"},{"number":290,"code":""},{"number":291,"code":"        for (let i = 0; i < outputMap.files.length; i++) {"},{"number":292,"code":""},{"number":293,"comment":" This shifts off the root folder b/c our index file is inside the output folder, ","code":"           "},{"number":294,"comment":" not one level up. See @issues/5","code":"           "},{"number":295,"comment":" > EXAMPLE: ","code":"           "},{"number":296,"comment":" > docs/myfile.ts.md is linked to as ./myfile.ts.md","code":"           "},{"number":297,"code":"            let path: any = outputMap.files[i].split(\"/\");"},{"number":298,"code":"            let name = path;"},{"number":299,"code":"            path.shift();"},{"number":300,"code":"            path.unshift(\".\");"},{"number":301,"code":"            path = path.join(\"/\");"},{"number":302,"code":"            name.shift();"},{"number":303,"code":"            name = name.join(\"/\");"},{"number":304,"code":""},{"number":305,"code":"            md += \"* [\" + name + \"](\" + path + \") \\n\";"},{"number":306,"code":"        }"},{"number":307,"code":"        md += \"\\n------------------------------ \\n\";"},{"number":308,"code":""},{"number":309,"code":"        md += outputMap.readme;"},{"number":310,"code":""},{"number":311,"code":"        writeFileSync(path.join(that.outputDir, that.indexFile), md, { flag: \"w\" });"},{"number":312,"code":"    }"},{"number":313,"code":""},{"number":314,"longComment":true,"comment":""},{"number":315,"longComment":true,"comment":" Generate a link Prefix from a fileName"},{"number":316,"longComment":true,"comment":" > NOTE: Without this code, links will not properly navigated to deeply nested pages with relative linking."},{"number":317,"comment":""},{"number":318,"code":"    getLinkPrefix(fileName: string): string {"},{"number":319,"code":"        let fileNameAsArray = fileName.split(\"/\");"},{"number":320,"code":"        let linkPrefix = \"\";"},{"number":321,"code":"        for (let i = 0; i < fileNameAsArray.length - 2; i++) {"},{"number":322,"code":"            linkPrefix += \"../\";"},{"number":323,"code":"        }"},{"number":324,"code":""},{"number":325,"code":"        return linkPrefix;"},{"number":326,"code":"    }"},{"number":327,"code":"}"},{"number":328,"code":""}],"type":"typescript"}