{"name":"./ts/modules/referenceParser.ts","lines":[{"number":0,"longComment":true,"comment":""},{"number":1,"longComment":true,"comment":"# !ReferenceParser"},{"number":2,"longComment":true,"comment":"@authors/chris"},{"number":3,"comment":""},{"number":4,"code":""},{"number":5,"code":"import {IReferenceCollection, IAnchor, ReferenceCollection} from \"../classes/referenceCollection\";"},{"number":6,"code":"import {IFile, ILine} from \"../classes/IFile\";"},{"number":7,"code":"import {getFileType} from \"../helpers/fileType\";"},{"number":8,"code":"import {writeFileSync, mkdirSync, accessSync, F_OK, openSync} from \"fs\";"},{"number":9,"code":"import mkdirp = require(\"mkdirp\");"},{"number":10,"code":"import * as path from \"path\";"},{"number":11,"code":"import XRegExp = require(\"xregexp\");"},{"number":12,"code":"import lineReader = require(\"line-reader\");"},{"number":13,"code":"import Q = require(\"q\");"},{"number":14,"code":"import {doInOrder, doNext} from \"../helpers/helpers\";"},{"number":15,"code":""},{"number":16,"code":"import log4js = require(\"log4js\");"},{"number":17,"code":"let logger = log4js.getLogger(\"duly-noted::ReferenceParser\");"},{"number":18,"code":""},{"number":19,"code":"export interface IReferenceParser {"},{"number":20,"code":"    files: string[];"},{"number":21,"code":"    parse(): any;"},{"number":22,"code":"}"},{"number":23,"code":""},{"number":24,"code":"export class ReferenceParser implements IReferenceParser {"},{"number":25,"code":"    files: string[];"},{"number":26,"code":"    rootCollection: IReferenceCollection;"},{"number":27,"code":"    anchorRegExp: RegExp;"},{"number":28,"code":"    commentRegExp: RegExp;"},{"number":29,"code":"    longCommentOpenRegExp: RegExp;"},{"number":30,"code":"    longCommentLineRegExp: RegExp;"},{"number":31,"code":"    longCommentCloseRegExp: RegExp;"},{"number":32,"code":"    outputDir: string;"},{"number":33,"code":""},{"number":34,"code":"    constructor(files: string[],"},{"number":35,"code":"        commentRegExp: RegExp,"},{"number":36,"code":"        anchorRegExp: RegExp,"},{"number":37,"code":"        longCommentOpenRegExp: RegExp,"},{"number":38,"code":"        longCommentLineRegExp: RegExp,"},{"number":39,"code":"        longCommentCloseRegExp: RegExp,"},{"number":40,"code":"        outputDir: string) {"},{"number":41,"code":"        logger.debug(\"ready\");"},{"number":42,"code":"        this.outputDir = outputDir;"},{"number":43,"code":"        this.files = files;"},{"number":44,"code":"        this.rootCollection = new ReferenceCollection(path.basename(this.outputDir));"},{"number":45,"code":"        this.anchorRegExp = anchorRegExp;"},{"number":46,"code":"        this.commentRegExp = commentRegExp;"},{"number":47,"code":"        this.longCommentOpenRegExp = longCommentOpenRegExp;"},{"number":48,"code":"        this.longCommentLineRegExp = longCommentLineRegExp;"},{"number":49,"code":"        this.longCommentCloseRegExp = longCommentCloseRegExp;"},{"number":50,"code":"    }"},{"number":51,"code":""},{"number":52,"code":"    public parse(): Q.Promise<IReferenceCollection> {"},{"number":53,"code":"        let that = this;"},{"number":54,"code":"        return Q.Promise<IReferenceCollection>((resolve, reject) => {"},{"number":55,"code":"            logger.info(\"Starting parse actions for \" + that.files.length + \" files.\");"},{"number":56,"code":""},{"number":57,"code":"            let parseActions = [];"},{"number":58,"code":""},{"number":59,"code":"            for (let i = 0; i < that.files.length; i++) {"},{"number":60,"code":"                let fileName = that.files[i].split(\".\");"},{"number":61,"code":"                let extension = fileName[fileName.length - 1];"},{"number":62,"code":"                if (extension === \"md\") {"},{"number":63,"code":"                    parseActions.push(that.parseAsMarkdown(that.files[i]));"},{"number":64,"code":"                } else {"},{"number":65,"code":"                    parseActions.push(that.parseFile(that.files[i]));"},{"number":66,"code":"                }"},{"number":67,"code":"            }"},{"number":68,"code":""},{"number":69,"code":"            Q.all(parseActions)"},{"number":70,"code":"            .then(() => {"},{"number":71,"code":"                logger.info(\"Saving out references.json\");"},{"number":72,"code":"                writeFileSync(path.join(that.outputDir, \"references.json\"), JSON.stringify(that.rootCollection), { flag: \"w\" });"},{"number":73,"code":"                resolve(that.rootCollection);"},{"number":74,"code":"            });"},{"number":75,"code":"        });"},{"number":76,"code":"    }"},{"number":77,"code":""},{"number":78,"code":"    parseAsMarkdown(fileName: string): Q.Promise<{}> {"},{"number":79,"code":"        logger.info(\"parsing markdown file: \" + fileName);"},{"number":80,"code":"        let that = this;"},{"number":81,"code":"        let file: IFile = {"},{"number":82,"code":"            name: fileName,"},{"number":83,"code":"            type: \"markdown\","},{"number":84,"code":"            lines: []"},{"number":85,"code":"        };"},{"number":86,"comment":" Line numbering traditionally starts at 1","code":"        let lineNumber = 0;"},{"number":87,"code":"        return Q.Promise((resolve, reject) => {"},{"number":88,"code":"            lineReader.eachLine(fileName, (line, last) => {"},{"number":89,"code":"                let thisLine: ILine = {"},{"number":90,"code":"                    number: lineNumber"},{"number":91,"code":"                };"},{"number":92,"code":""},{"number":93,"code":"                file.lines.push(thisLine);"},{"number":94,"comment":" In Markdown all lines are considered comments","code":"                file.lines[lineNumber].comment = line;"},{"number":95,"code":""},{"number":96,"code":"                that.parseComment(file.lines[lineNumber].comment, fileName, lineNumber)"},{"number":97,"code":"                .then(() => {"},{"number":98,"code":"                    if (last) {"},{"number":99,"code":"                        that.writeOutFile(file)"},{"number":100,"code":"                        .then(() => {"},{"number":101,"code":"                            resolve(null);"},{"number":102,"code":"                            return false;"},{"number":103,"code":"                        })"},{"number":104,"code":"                        .catch((err) => {"},{"number":105,"code":"                            logger.fatal(err.message);"},{"number":106,"code":"                        });"},{"number":107,"code":"                    }"},{"number":108,"code":"                });"},{"number":109,"code":""},{"number":110,"code":"                lineNumber++;"},{"number":111,"code":"            });"},{"number":112,"code":"        });"},{"number":113,"code":"    }"},{"number":114,"code":""},{"number":115,"code":"    parseFile(fileName: string): Q.Promise<{}> {"},{"number":116,"code":"        logger.info(\"parsing code file: \" + fileName);"},{"number":117,"code":"        let that = this;"},{"number":118,"code":"        let file: IFile;"},{"number":119,"code":"        let insideLongComment = false;"},{"number":120,"code":"        return Q.Promise((resolve, reject) => {"},{"number":121,"comment":" read all lines:","code":"           "},{"number":122,"code":"            logger.info(\"Working on file: \" + fileName);"},{"number":123,"code":"            file = {"},{"number":124,"code":"                name: fileName,"},{"number":125,"code":"                lines: [],"},{"number":126,"code":"                type: getFileType(fileName)"},{"number":127,"code":"            };"},{"number":128,"code":""},{"number":129,"comment":" Line numbering traditionally starts at 1","code":"            let lineNumber = 0;"},{"number":130,"code":"            lineReader.eachLine(fileName, (line, last) => {"},{"number":131,"code":""},{"number":132,"code":"                let thisLine: ILine = {"},{"number":133,"code":"                    number: lineNumber"},{"number":134,"code":"                };"},{"number":135,"code":"                file.lines.push(thisLine);"},{"number":136,"code":""},{"number":137,"code":"                let longCommentOpenMatch = XRegExp.exec(line, that.longCommentOpenRegExp, 0, false);"},{"number":138,"code":""},{"number":139,"comment":" These comments must come at beginning of line.","code":"                if (!insideLongComment && longCommentOpenMatch) {"},{"number":140,"code":"                    insideLongComment = true;"},{"number":141,"code":"                    file.lines[lineNumber].longComment = true;"},{"number":142,"code":"                }"},{"number":143,"code":""},{"number":144,"comment":" Not inside a long comment - look for a regular comment.","code":"               "},{"number":145,"code":"                if (!insideLongComment) {"},{"number":146,"code":"                    let match = XRegExp.exec(line, that.commentRegExp, 0, false);"},{"number":147,"code":""},{"number":148,"comment":" Contains a tradition comment","code":"                   "},{"number":149,"code":"                    if (match) {"},{"number":150,"code":""},{"number":151,"code":"                        file.lines[lineNumber].comment = match[1];"},{"number":152,"code":"                        file.lines[lineNumber].code = line.substr(0, match.index - 1);"},{"number":153,"code":""},{"number":154,"code":"                        that.parseComment(file.lines[lineNumber].comment, fileName, lineNumber)"},{"number":155,"code":"                            .then(() => {"},{"number":156,"code":"                                if (last) {"},{"number":157,"code":"                                    that.writeOutFile(file)"},{"number":158,"code":"                                    .then(() => {"},{"number":159,"code":"                                        resolve(null);"},{"number":160,"code":"                                        return false;"},{"number":161,"code":"                                    })"},{"number":162,"code":"                                    .catch((err) => {"},{"number":163,"code":"                                        logger.fatal(err.message);"},{"number":164,"code":"                                    });"},{"number":165,"code":"                                }"},{"number":166,"code":"                            });"},{"number":167,"comment":" Not a comment (code only)","code":"                       "},{"number":168,"code":"                    } else {"},{"number":169,"code":"                        file.lines[lineNumber].code = line;"},{"number":170,"code":"                        if (last) {"},{"number":171,"code":"                            that.writeOutFile(file)"},{"number":172,"code":"                            .then(() => {"},{"number":173,"code":"                                resolve(null);"},{"number":174,"code":"                                return false;"},{"number":175,"code":"                            })"},{"number":176,"code":"                            .catch((err) => {"},{"number":177,"code":"                                logger.fatal(err.message);"},{"number":178,"code":"                            });"},{"number":179,"code":"                        }"},{"number":180,"code":"                    }"},{"number":181,"comment":" Inside a long comment - so the whole thing is a comment","code":"                } else {"},{"number":182,"comment":" If this line contains a long comment closing symbol, then next line isn't long comment.","code":"                   "},{"number":183,"comment":" let longCommentEnd = line.search(that.longCommentCloseRegExp);","code":"                   "},{"number":184,"code":"                    if (XRegExp.exec(line, this.longCommentCloseRegExp, 0)) {"},{"number":185,"code":"                        file.lines[lineNumber].comment = \"\";"},{"number":186,"code":"                        insideLongComment = false;"},{"number":187,"code":"                    } else {"},{"number":188,"code":""},{"number":189,"code":"                        file.lines[lineNumber].longComment = true;"},{"number":190,"code":""},{"number":191,"code":"                        if (longCommentOpenMatch) {"},{"number":192,"code":"                            file.lines[lineNumber].comment = longCommentOpenMatch[1].trim();"},{"number":193,"code":"                        } else {"},{"number":194,"code":"                            let match = XRegExp.exec(line, this.longCommentLineRegExp, 0);"},{"number":195,"code":"                            file.lines[lineNumber].comment = match[1].trim() || line;"},{"number":196,"code":"                        }"},{"number":197,"code":""},{"number":198,"code":"                        that.parseComment(line, fileName, lineNumber)"},{"number":199,"code":"                        .then(() => {"},{"number":200,"code":"                            if (last) {"},{"number":201,"code":"                                that.writeOutFile(file)"},{"number":202,"code":"                                    .then(() => {"},{"number":203,"code":"                                        resolve(null);"},{"number":204,"code":"                                        return false;"},{"number":205,"code":"                                    })"},{"number":206,"code":"                                    .catch((err) => {"},{"number":207,"code":"                                        logger.fatal(err.message);"},{"number":208,"code":"                                    });"},{"number":209,"code":"                            }"},{"number":210,"code":"                        });"},{"number":211,"code":"                    }"},{"number":212,"code":""},{"number":213,"code":"                    if (last) {"},{"number":214,"code":"                        that.writeOutFile(file)"},{"number":215,"code":"                        .then(() => {"},{"number":216,"code":"                            resolve(null);"},{"number":217,"code":"                            return false;"},{"number":218,"code":"                        })"},{"number":219,"code":"                        .catch((err) => {"},{"number":220,"code":"                            logger.fatal(err.message);"},{"number":221,"code":"                        });"},{"number":222,"code":"                    }"},{"number":223,"code":"                }"},{"number":224,"code":""},{"number":225,"code":"                lineNumber++;"},{"number":226,"code":"            });"},{"number":227,"code":"        });"},{"number":228,"code":"    }"},{"number":229,"code":""},{"number":230,"code":"    writeOutFile(file: IFile) {"},{"number":231,"code":"        let that = this;"},{"number":232,"code":"        return Q.Promise<{}>((resolve, reject) => {"},{"number":233,"code":"            let filePathArray = path.join(that.outputDir, file.name + \".json\").split(\"/\");"},{"number":234,"code":"            filePathArray.pop();"},{"number":235,"code":"            let filePath = filePathArray.join(\"/\");"},{"number":236,"code":"            mkdirp(filePath, function (err) {"},{"number":237,"code":"                if (err) {"},{"number":238,"code":"                    logger.fatal(err.message);"},{"number":239,"code":"                    reject(err);"},{"number":240,"code":"                }"},{"number":241,"code":"                else {"},{"number":242,"code":"                    logger.info(\"Saving output for: \" + file.name);"},{"number":243,"code":"                    writeFileSync(path.join(that.outputDir, file.name + \".json\"), JSON.stringify(file), { flag: \"w\" });"},{"number":244,"code":"                    resolve(null);"},{"number":245,"code":"                }"},{"number":246,"code":"            });"},{"number":247,"code":"        });"},{"number":248,"code":"    }"},{"number":249,"code":""},{"number":250,"code":"    parseLine(line: string, fileName: string, lineNumber: number, insideLongComment: boolean): Q.Promise<{}> {"},{"number":251,"code":"        let that = this;"},{"number":252,"code":"        return Q.Promise<string[]>((resolve, reject) => {"},{"number":253,"code":"            let commentStart = line.search(that.commentRegExp);"},{"number":254,"code":"        });"},{"number":255,"code":"    }"},{"number":256,"code":""},{"number":257,"code":"    parseComment(comment: string, fileName: string, lineNumber: number): Q.Promise<{}> {"},{"number":258,"code":"        let that = this;"},{"number":259,"code":"        return Q.Promise<{}>((resolve, reject) => {"},{"number":260,"code":"            let pos = 0;"},{"number":261,"code":"            let match;"},{"number":262,"code":""},{"number":263,"code":"            while (match = XRegExp.exec(comment, that.anchorRegExp, pos, false)) {"},{"number":264,"code":"                logger.debug(\"found anchor: \" + match[1]);"},{"number":265,"code":""},{"number":266,"code":"                let parts = match[1].split(\"/\");"},{"number":267,"code":""},{"number":268,"code":"                that.rootCollection.addAnchorTag(parts, fileName, lineNumber);"},{"number":269,"code":"                resolve(null);"},{"number":270,"code":""},{"number":271,"code":"                pos = match.index + match[0].length;"},{"number":272,"code":"            }"},{"number":273,"code":"            resolve(null);"},{"number":274,"code":"        });"},{"number":275,"code":"    };"},{"number":276,"code":"}"}],"type":"typescript"}