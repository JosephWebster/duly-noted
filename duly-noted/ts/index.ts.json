{"name":"./ts/index.ts","lines":[{"number":0,"longComment":true,"comment":""},{"number":1,"longComment":true,"comment":" # !Index"},{"number":2,"longComment":true,"comment":" @authors/chris"},{"number":3,"longComment":true,"comment":" @license"},{"number":4,"longComment":true,"comment":" "},{"number":5,"longComment":true,"comment":" This is the entry file to Duly Noted"},{"number":6,"comment":""},{"number":7,"code":"import {IConfig} from \"./classes/IConfig\";"},{"number":8,"code":"import program = require(\"commander\");"},{"number":9,"code":"import {writeFileSync, mkdirSync, accessSync, F_OK, unlinkSync, readFileSync} from \"fs\";"},{"number":10,"code":"import {ReferenceParser} from \"./modules/referenceParser\";"},{"number":11,"code":"import _ = require(\"underscore\");"},{"number":12,"code":"import * as path from \"path\";"},{"number":13,"code":"import glob = require(\"glob\");"},{"number":14,"code":"import Q = require(\"q\");"},{"number":15,"code":"import {MarkdownGenerator} from \"./generators/markdownGenerator\";"},{"number":16,"code":"import {HtmlGenerator} from \"./generators/Htmlgenerator\";"},{"number":17,"code":"import log4js = require(\"log4js\");"},{"number":18,"code":"let logger = log4js.getLogger(\"duly-noted::run\");"},{"number":19,"code":""},{"number":20,"code":""},{"number":21,"longComment":true,"comment":""},{"number":22,"longComment":true,"comment":" ## Run"},{"number":23,"longComment":true,"comment":" "},{"number":24,"longComment":true,"comment":" Runs duly-typed using taking the consuing the config file (see @IConfig) found as `/duly-noted.json`"},{"number":25,"longComment":true,"comment":" Basic code flow is:"},{"number":26,"longComment":true,"comment":" 1. parse the cofiguration options"},{"number":27,"longComment":true,"comment":" 2. get the files, and pass those to the @ReferenceParser"},{"number":28,"longComment":true,"comment":" 3. output the reponse to either/both @HtmlGenerator or @MarkdownGenerator"},{"number":29,"comment":""},{"number":30,"code":"export function run () {"},{"number":31,"code":"    logger.info(\"Welcome to Duly Noted.\");"},{"number":32,"code":"    let logLevel: string;"},{"number":33,"code":"    let config: IConfig;"},{"number":34,"code":""},{"number":35,"code":"    program"},{"number":36,"code":"    .version(\"1.1.0\")"},{"number":37,"code":"    .option(\"-c, --config <file>\", \"Path to duly-noted.json\", \"duly-noted.json\")"},{"number":38,"code":"    .option(\"-o, --outputDir <path>\", \"Path to output docs to\")"},{"number":39,"code":"    .option(\"-g, --generator <generator>\", \"Generator to use.\")"},{"number":40,"code":"    .option(\"-i, --init\", \"Creates a default duly-noted.json file\")"},{"number":41,"code":"    .option(\"-v, --verbose\", \"Chatty Cathy mode\")"},{"number":42,"code":"    .parse(process.argv);"},{"number":43,"code":""},{"number":44,"comment":" ### Init - copies example duly-noted.json","code":"    "},{"number":45,"code":"     if (program.init) {"},{"number":46,"code":"        try {"},{"number":47,"code":"          let config = JSON.parse(readFileSync(\"duly-noted.json\").toString());"},{"number":48,"code":"          logger.fatal(\"It looks like you already have a 'duly-noted.json' file. Please just update that one.\");"},{"number":49,"code":"          return;"},{"number":50,"code":"        } catch (err) {"},{"number":51,"code":"            let projectPathArray = __dirname.split(\"/\");"},{"number":52,"code":"            let projectPath = projectPathArray.join(\"/\");"},{"number":53,"code":"            let dnJSON = readFileSync(path.join(projectPath, \"default.duly-noted.json\")).toString();"},{"number":54,"code":"            writeFileSync(\"duly-noted.json\", dnJSON);"},{"number":55,"code":"            logger.info(\"duly-noted.json file created. YOU NEED TO UPDATE IT TO FIT YOUR NEEDS. Duly Noted will not work off-the-shelf.\");"},{"number":56,"code":"            logger.info(\"Seriously, stop reading the console, and go update your brand new duly-noted.json file aleady!\");"},{"number":57,"code":"            return;"},{"number":58,"code":"        }"},{"number":59,"code":"     }"},{"number":60,"code":""},{"number":61,"code":"     try {"},{"number":62,"code":"        config = JSON.parse(readFileSync(program.config).toString());"},{"number":63,"code":"     } catch (error) {"},{"number":64,"code":"         logger.error(error.message);"},{"number":65,"code":"         logger.fatal(\"Error reading config file: \" + program.config);"},{"number":66,"code":"         return;"},{"number":67,"code":"     }"},{"number":68,"code":""},{"number":69,"code":"     config.outputDir = program.outputDir || config.outputDir;"},{"number":70,"code":""},{"number":71,"code":"     if (program.generator) {"},{"number":72,"code":"         config.generators = [program.generator];"},{"number":73,"code":"     }"},{"number":74,"code":""},{"number":75,"code":"     let getFiles: Q.IPromise<string[]>[] = [];"},{"number":76,"code":""},{"number":77,"code":"     for (let i = 0; i < config.files.length; i++) {"},{"number":78,"code":"        getFiles.push(getFilesFromGlob(config.files[i]));"},{"number":79,"code":"     }"},{"number":80,"code":""},{"number":81,"code":"     if (program.verbose) {"},{"number":82,"code":"         logLevel = \"DEUBG\";"},{"number":83,"code":"     } else {"},{"number":84,"code":"         logLevel = \"INFO\";"},{"number":85,"code":"     }"},{"number":86,"code":""},{"number":87,"code":"     logger.setLevel(logLevel);"},{"number":88,"code":""},{"number":89,"code":"    logger.debug(\"Starting Reference Parsing.\");"},{"number":90,"code":"     Q.all(getFiles)"},{"number":91,"code":"     .then((results) => {"},{"number":92,"code":"         let files = _.flatten(results);"},{"number":93,"code":"         let referenceParser = new ReferenceParser(config, logLevel);"},{"number":94,"code":""},{"number":95,"code":"         referenceParser.parse()"},{"number":96,"code":"         .then((response) => {"},{"number":97,"code":"             logger.info(\"Parsing complete, beginning export.\");"},{"number":98,"code":""},{"number":99,"code":"             if (_.contains(config.generators, \"html\")) {"},{"number":100,"code":"                new HtmlGenerator(config, logLevel).generate();"},{"number":101,"code":"             }"},{"number":102,"code":""},{"number":103,"code":"             if (_.contains(config.generators, \"markdown\")) {"},{"number":104,"code":"                new MarkdownGenerator(config, logLevel).generate();"},{"number":105,"code":"             }"},{"number":106,"code":""},{"number":107,"code":"         })"},{"number":108,"code":"         .catch( (err: Error) => {"},{"number":109,"comment":" !TODO/errors > An overall stratefy is needed to identify errors.","code":"            "},{"number":110,"code":"             logger.error(err.message + err.stack);"},{"number":111,"code":"         });"},{"number":112,"code":"     });"},{"number":113,"code":"}"},{"number":114,"code":""},{"number":115,"longComment":true,"comment":""},{"number":116,"longComment":true,"comment":" ## Get Files from Glob"},{"number":117,"longComment":true,"comment":" This is a simple helper to get a set of files from a glob."},{"number":118,"comment":""},{"number":119,"code":"function getFilesFromGlob(globString: string): Q.Promise<string[]> {"},{"number":120,"code":"    return Q.Promise<string[]>((resolve, reject) => {"},{"number":121,"code":"        glob(globString, (err, files: string[]) => {"},{"number":122,"code":"            if (err) reject(err);"},{"number":123,"code":"            resolve(files);"},{"number":124,"code":"        });"},{"number":125,"code":"    });"},{"number":126,"code":"}"}],"type":"typescript"}