{"name":"./ts/classes/referenceCollection.ts","lines":[{"number":0,"longComment":true,"comment":""},{"number":1,"longComment":true,"comment":"# !ReferenceCollection"},{"number":2,"longComment":true,"comment":"@authors/chris"},{"number":3,"longComment":true,"comment":"@license"},{"number":4,"longComment":true,"comment":" * "},{"number":5,"longComment":true,"comment":"This reference parser that parses all the links and anchors in your code - the output of which is two reference collections:"},{"number":6,"longComment":true,"comment":"* `internalReferences.json`"},{"number":7,"longComment":true,"comment":"* `externalReferences.json`"},{"number":8,"comment":""},{"number":9,"code":"import {findWhere, findIndex} from \"underscore\";"},{"number":10,"code":"import log4js = require(\"log4js\");"},{"number":11,"code":"let logger = log4js.getLogger(\"duly-noted::ReferenceCollection\");"},{"number":12,"code":""},{"number":13,"longComment":true,"comment":""},{"number":14,"longComment":true,"comment":"## !interfaces/IReferenceCollection"},{"number":15,"comment":""},{"number":16,"code":"export interface IReferenceCollection {"},{"number":17,"code":"    id: string;"},{"number":18,"code":"    anchors?: IAnchor[];"},{"number":19,"code":"    subcollections?: IReferenceCollection[];"},{"number":20,"code":"}"},{"number":21,"code":""},{"number":22,"longComment":true,"comment":""},{"number":23,"longComment":true,"comment":"## !interfaces/IAnchor"},{"number":24,"comment":""},{"number":25,"code":"export interface IAnchor {"},{"number":26,"code":"    id: string;"},{"number":27,"code":"    file: string;"},{"number":28,"code":"    line: number;"},{"number":29,"code":"}"},{"number":30,"code":""},{"number":31,"longComment":true,"comment":""},{"number":32,"longComment":true,"comment":"## !interfaces/ITag"},{"number":33,"comment":""},{"number":34,"code":"export interface ITag {"},{"number":35,"code":"    anchor: string;"},{"number":36,"code":"    path: string;"},{"number":37,"code":"    linkStub: string;"},{"number":38,"code":"}"},{"number":39,"code":""},{"number":40,"longComment":true,"comment":""},{"number":41,"longComment":true,"comment":"## !classes/ReferenceCollection"},{"number":42,"comment":""},{"number":43,"code":"export class ReferenceCollection implements IReferenceCollection {"},{"number":44,"code":"    id: string;"},{"number":45,"code":"    anchors: IAnchor[];"},{"number":46,"code":"    subcollections: IReferenceCollection[];"},{"number":47,"code":"    logLevel: string;"},{"number":48,"code":""},{"number":49,"longComment":true,"comment":""},{"number":50,"longComment":true,"comment":"### Creates an instance of @ReferenceCollection"},{"number":51,"comment":""},{"number":52,"code":"    constructor(id: string, logLevel?: string) {"},{"number":53,"code":"        this.logLevel = logLevel || \"DEBUG\";"},{"number":54,"code":"        logger.setLevel(logLevel);"},{"number":55,"code":"        this.id = id;"},{"number":56,"code":"        this.anchors = [];"},{"number":57,"code":"        this.subcollections = [];"},{"number":58,"code":"    }"},{"number":59,"code":""},{"number":60,"longComment":true,"comment":""},{"number":61,"longComment":true,"comment":"## Recursively inflate a reference collection in the form of @interfaces/IReferenceCollection from flat data (likely from JSON file)"},{"number":62,"comment":""},{"number":63,"code":"    public inflate(collection: IReferenceCollection) {"},{"number":64,"code":"        this.id = collection.id;"},{"number":65,"code":"        this.anchors = collection.anchors;"},{"number":66,"code":"        for (let i = 0; i < collection.subcollections.length; i++) {"},{"number":67,"code":"            this.subcollections.push(new ReferenceCollection(collection.subcollections[i].id, this.logLevel).inflate(collection.subcollections[i]));"},{"number":68,"code":"        }"},{"number":69,"code":"        return this;"},{"number":70,"code":"    }"},{"number":71,"code":""},{"number":72,"longComment":true,"comment":""},{"number":73,"longComment":true,"comment":"## Add an @interfaces/IAnchor to collection"},{"number":74,"comment":""},{"number":75,"code":"    public addAnchor(anchor: IAnchor): void {"},{"number":76,"code":"        let existing = findWhere(this.anchors, {id: anchor.id});"},{"number":77,"code":"        if (existing) {"},{"number":78,"code":"            logger.error(\"Cannot add anchor '\" + anchor.id + \"' from \" + anchor.file + \":\" + anchor.line + \" to '\" + this.id + \"' collection because it was already defined at \" + existing.file + \":\" + existing.line);"},{"number":79,"code":"        }"},{"number":80,"code":""},{"number":81,"code":"        this.anchors.push(anchor);"},{"number":82,"code":"    }"},{"number":83,"code":""},{"number":84,"longComment":true,"comment":""},{"number":85,"longComment":true,"comment":"## Add a subcollection to this collection in the form of an @interfaces/IReferenceCollection"},{"number":86,"comment":""},{"number":87,"code":"    public addSubcollection(collection: IReferenceCollection): void {"},{"number":88,"code":"        let existingAnchor = findWhere(this.anchors, {id: collection.id});"},{"number":89,"code":"        if (existingAnchor) {"},{"number":90,"code":"            logger.error(\"Cannot add collection '\" + collection.id + \"' because it was already defined as an anchor \" + existingAnchor.file + \":\" + existingAnchor.line);"},{"number":91,"code":"            return;"},{"number":92,"code":"        }"},{"number":93,"code":""},{"number":94,"code":"        let existingCollection = findWhere(this.anchors, {id: collection.id});"},{"number":95,"code":"        if (existingCollection) {"},{"number":96,"code":"            logger.error(\"Cannot add collection '\" + collection.id + \"' because it was already defined as a subcollection of '\" + collection.id +  \"'\");"},{"number":97,"code":"            return;"},{"number":98,"code":"        }"},{"number":99,"code":""},{"number":100,"code":"        this.subcollections.push(collection);"},{"number":101,"code":"    }"},{"number":102,"code":""},{"number":103,"longComment":true,"comment":""},{"number":104,"longComment":true,"comment":"## Add Anchor Tag to the appropriate subcollection"},{"number":105,"longComment":true,"comment":"Recursively skims the collection and subcollections to place anchor in the correct place."},{"number":106,"comment":""},{"number":107,"code":"    public addAnchorTag(anchorTag: string[], fileName: string, lineNumber: number): void {"},{"number":108,"code":"        logger.debug(\"processing new anchorTag: \" + JSON.stringify(anchorTag));"},{"number":109,"code":"        if (anchorTag.length === 1) {"},{"number":110,"code":"            logger.debug(\"Adding anchor tag:\" + anchorTag[0]);"},{"number":111,"code":"            this.addAnchor({"},{"number":112,"code":"                id: anchorTag[0],"},{"number":113,"code":"                line: lineNumber,"},{"number":114,"code":"                file: fileName"},{"number":115,"code":"            });"},{"number":116,"code":"            return;"},{"number":117,"code":"        } else {"},{"number":118,"code":"            let collectionTag = anchorTag.shift();"},{"number":119,"code":""},{"number":120,"code":"            let i = findIndex(this.subcollections, (item) => {"},{"number":121,"code":"                return item.id === collectionTag;"},{"number":122,"code":"            });"},{"number":123,"code":""},{"number":124,"code":"            if (i > -1) {"},{"number":125,"code":"            logger.debug(\"Collection present:\" + collectionTag);"},{"number":126,"code":""},{"number":127,"code":"            return this.subcollections[i].addAnchorTag(anchorTag, fileName, lineNumber);"},{"number":128,"code":"            } else {"},{"number":129,"code":"                logger.debug(\"Collection not present:\" + collectionTag);"},{"number":130,"code":"                let newSubCollection = new ReferenceCollection(collectionTag);"},{"number":131,"code":"                newSubCollection.addAnchorTag(anchorTag, fileName, lineNumber);"},{"number":132,"code":"                this.addSubcollection(newSubCollection);"},{"number":133,"code":"                return;"},{"number":134,"code":"            }"},{"number":135,"code":"        }"},{"number":136,"code":"    }"},{"number":137,"code":""},{"number":138,"longComment":true,"comment":""},{"number":139,"longComment":true,"comment":"## Get All the tags in a collection and its subcollections"},{"number":140,"longComment":true,"comment":"Recursively cull all of the tags."},{"number":141,"comment":""},{"number":142,"code":"    public getAllTags(parentPath?: string, depth?: number): ITag[] {"},{"number":143,"code":"        parentPath = parentPath || \"\";"},{"number":144,"code":"        depth = depth || 0;"},{"number":145,"code":""},{"number":146,"code":"        let allTags: ITag[] = [];"},{"number":147,"code":"        if (depth > 0) {"},{"number":148,"code":""},{"number":149,"code":"            for (let i = 0; i < this.anchors.length; i++) {"},{"number":150,"code":"                if (parentPath !== \"\" && parentPath !== null) {"},{"number":151,"code":"                    allTags.push({"},{"number":152,"code":"                        anchor: parentPath + \"/\" + this.id + \"/\" + this.anchors[i].id,"},{"number":153,"code":"                        path: this.anchors[i].file,"},{"number":154,"code":"                        linkStub: this.anchors[i].id"},{"number":155,"code":"                    });"},{"number":156,"code":"                } else {"},{"number":157,"code":"                    allTags.push({"},{"number":158,"code":"                        anchor: this.id + \"/\" + this.anchors[i].id,"},{"number":159,"code":"                        path: this.anchors[i].file,"},{"number":160,"code":"                        linkStub: this.anchors[i].id"},{"number":161,"code":"                    });"},{"number":162,"code":"                }"},{"number":163,"code":"            }"},{"number":164,"code":""},{"number":165,"code":"            for (let i = 0; i < this.subcollections.length; i++) {"},{"number":166,"code":"                allTags = allTags.concat(this.subcollections[i].getAllTags(parentPath + \"/\" + this.id,  depth + 1));"},{"number":167,"code":"            }"},{"number":168,"code":"        } else {"},{"number":169,"code":""},{"number":170,"code":"            for (let i = 0; i < this.anchors.length; i++) {"},{"number":171,"code":"                allTags.push({"},{"number":172,"code":"                    anchor: this.anchors[i].id,"},{"number":173,"code":"                    path: this.anchors[i].file,"},{"number":174,"code":"                    linkStub: this.anchors[i].id"},{"number":175,"code":"                });"},{"number":176,"code":"            }"},{"number":177,"code":""},{"number":178,"code":"            for (let i = 0; i < this.subcollections.length; i++) {"},{"number":179,"code":"                allTags = allTags.concat(this.subcollections[i].getAllTags(null, depth + 1));"},{"number":180,"code":"            }"},{"number":181,"code":"        }"},{"number":182,"code":""},{"number":183,"code":"        return allTags;"},{"number":184,"code":"    }"},{"number":185,"code":""},{"number":186,"longComment":true,"comment":""},{"number":187,"longComment":true,"comment":"## Get a list of anchors sorted by an array of all the collections."},{"number":188,"comment":""},{"number":189,"code":"    public getTagsByCollection (allCollections?, parentPath?) {"},{"number":190,"code":"        allCollections = allCollections || [];"},{"number":191,"code":"        parentPath = parentPath || \"\";"},{"number":192,"code":"        let id = parentPath + \"/\" + this.id;"},{"number":193,"code":""},{"number":194,"code":"        allCollections.push({"},{"number":195,"code":"            name: id,"},{"number":196,"code":"            anchors: []"},{"number":197,"code":"        });"},{"number":198,"code":""},{"number":199,"code":"        for (let i = 0; i < this.anchors.length; i++) {"},{"number":200,"code":"            allCollections[allCollections.length - 1].anchors.push({"},{"number":201,"code":"                anchor: this.anchors[i].id,"},{"number":202,"code":"                path: this.anchors[i].file,"},{"number":203,"code":"                linkStub: this.anchors[i].id"},{"number":204,"code":"            });"},{"number":205,"code":"        }"},{"number":206,"code":""},{"number":207,"code":"        for (let i = 0; i < this.subcollections.length; i++) {"},{"number":208,"code":"            allCollections = this.subcollections[i].getTagsByCollection(allCollections, id);"},{"number":209,"code":"        }"},{"number":210,"code":""},{"number":211,"code":"        return allCollections;"},{"number":212,"code":"    }"},{"number":213,"code":"}"}],"type":"typescript"}