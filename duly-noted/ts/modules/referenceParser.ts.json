{"name":"./ts/modules/referenceParser.ts","lines":[{"number":0,"longComment":true,"comment":" !ReferenceParser/main"},{"number":1,"longComment":true,"comment":"# Reference Parser"},{"number":2,"longComment":true,"comment":"@authors/chris"},{"number":3,"longComment":true,"comment":"@license"},{"number":4,"longComment":true,"comment":""},{"number":5,"longComment":true,"comment":"This code parse files, build maps of each the code file, "},{"number":6,"longComment":true,"comment":"as well as collections of internal and external references. "},{"number":7,"longComment":true,"comment":"Examples below:"},{"number":8,"longComment":true,"comment":" * Example Code Map: @ReferenceParser/example-output/code-map"},{"number":9,"longComment":true,"comment":" * Example Reference Map: @ReferenceParser/example-output/reference-collection"},{"number":10,"longComment":true,"comment":""},{"number":11,"longComment":true,"comment":"These files are typically deleted at the end of the @Index/run "},{"number":12,"longComment":true,"comment":"process, however, you can leave them by setting `leaveJSONFiles = true`"},{"number":13,"longComment":true,"comment":"in your 'duly-noted.json' file. "},{"number":14,"longComment":true,"comment":""},{"number":15,"longComment":true,"comment":"These files are ouput at @ReferenceParser/constants/parseLoc ."},{"number":16,"longComment":true,"comment":" "},{"number":17,"longComment":true,"comment":""},{"number":18,"code":""},{"number":19,"code":"import {IReferenceCollection, IAnchor, ReferenceCollection} from \"../classes/referenceCollection\";"},{"number":20,"code":"import {IConfig, IExternalReference} from \"../classes/IConfig\";"},{"number":21,"code":"import {IFile, ILine} from \"../classes/IFile\";"},{"number":22,"code":"import {getFileType} from \"../helpers/fileType\";"},{"number":23,"code":"import {writeFileSync, mkdirSync, accessSync, F_OK, openSync, readFileSync} from \"fs\";"},{"number":24,"code":"import mkdirp = require(\"mkdirp\");"},{"number":25,"code":"import * as path from \"path\";"},{"number":26,"code":"import XRegExp = require(\"xregexp\");"},{"number":27,"code":"import lineReader = require(\"line-reader\");"},{"number":28,"code":"import Q = require(\"q\");"},{"number":29,"code":"import {doInOrder, doNext} from \"../helpers/helpers\";"},{"number":30,"code":""},{"number":31,"code":"import log4js = require(\"log4js\");"},{"number":32,"code":"let logger = log4js.getLogger(\"duly-noted::ReferenceParser\");"},{"number":33,"code":""},{"number":34,"longComment":true,"comment":" !interfaces/IReferenceParser"},{"number":35,"longComment":true,"comment":"## Interface for ReferenceParser"},{"number":36,"longComment":true,"comment":""},{"number":37,"code":"export interface IReferenceParser {"},{"number":38,"code":"    parse(): Q.Promise<IReferenceCollection>;"},{"number":39,"code":"}"},{"number":40,"code":""},{"number":41,"longComment":true,"comment":" !ReferenceParser/constants/parseLoc"},{"number":42,"longComment":true,"comment":"Location to store output JSON file and reference collection maps."},{"number":43,"longComment":true,"comment":""},{"number":44,"code":"export const parseLoc = \"duly-noted\";"},{"number":45,"code":""},{"number":46,"longComment":true,"comment":" !ReferenceParser/class"},{"number":47,"longComment":true,"comment":"## Reference Parser Class"},{"number":48,"longComment":true,"comment":""},{"number":49,"code":"export class ReferenceParser implements IReferenceParser {"},{"number":50,"code":"    files: string[];"},{"number":51,"code":"    rootCollection: IReferenceCollection;"},{"number":52,"code":"    anchorRegExp: RegExp;"},{"number":53,"code":"    commentPatterns: {}[];"},{"number":54,"code":"    externalReferences: IExternalReference[];"},{"number":55,"code":""},{"number":56,"longComment":true,"comment":" !ReferenceParser/constructor"},{"number":57,"longComment":true,"comment":"### Creates an instance of @ReferenceParser/class"},{"number":58,"longComment":true,"comment":""},{"number":59,"code":"    constructor(config: IConfig, logLevel?: string) {"},{"number":60,"code":"        this.files = config.files;"},{"number":61,"code":"        this.rootCollection = new ReferenceCollection(parseLoc, logLevel);"},{"number":62,"code":"        this.anchorRegExp = new RegExp(config.anchorRegExp);"},{"number":63,"code":""},{"number":64,"code":"        let commentPatternsFile = path.join(__dirname, \"../../bin/comment-patterns.json\");"},{"number":65,"code":"        logger.debug(\"Loading Comment Patterns from \" + commentPatternsFile);"},{"number":66,"code":"        this.commentPatterns = JSON.parse(readFileSync(commentPatternsFile).toString());"},{"number":67,"code":"        this.externalReferences = config.externalReferences;"},{"number":68,"code":"        logger.setLevel(logLevel || \"DEBUG\");"},{"number":69,"code":"        logger.debug(\"ready\");"},{"number":70,"code":"    }"},{"number":71,"code":""},{"number":72,"longComment":true,"comment":" !ReferenceParser/parse"},{"number":73,"longComment":true,"comment":"## Parse "},{"number":74,"longComment":true,"comment":"Parser all files for anchors - produce a @interfaces/IReferenceCollection"},{"number":75,"longComment":true,"comment":""},{"number":76,"code":"    public parse(): Q.Promise<IReferenceCollection> {"},{"number":77,"code":"        let that = this;"},{"number":78,"code":"        return Q.Promise<IReferenceCollection>((resolve, reject) => {"},{"number":79,"code":"            logger.info(\"Starting parse actions for \" + that.files.length + \" files.\");"},{"number":80,"code":""},{"number":81,"longComment":true,"comment":" "},{"number":82,"longComment":true,"comment":" Build a collection of parse actions. "},{"number":83,"longComment":true,"comment":""},{"number":84,"longComment":true,"comment":" * If file is Markdown, then use @ReferenceParser/parseAsMarkdown"},{"number":85,"longComment":true,"comment":" * Otherwise pass to @ReferenceParser/parseFile "},{"number":86,"longComment":true,"comment":""},{"number":87,"code":"            let parseActions = [];"},{"number":88,"code":"            for (let i = 0; i < that.files.length; i++) {"},{"number":89,"code":"                let fileName = that.files[i].split(\".\");"},{"number":90,"code":"                let extension = fileName[fileName.length - 1];"},{"number":91,"code":"                if (extension === \"md\") {"},{"number":92,"code":"                    parseActions.push(that.parseAsMarkdown(that.files[i]));"},{"number":93,"code":"                } else {"},{"number":94,"code":"                    parseActions.push(that.parseFile(that.files[i]));"},{"number":95,"code":"                }"},{"number":96,"code":"            }"},{"number":97,"code":""},{"number":98,"code":"            Q.all(parseActions)"},{"number":99,"code":"            .then(() => {"},{"number":100,"comment":" Once all parse actions are complete write our the files.","code":"               "},{"number":101,"code":"                logger.debug(\"Saving out internalReferences.json & externalReferences.json\");"},{"number":102,"code":"                writeFileSync(path.join(parseLoc, \"internalReferences.json\"), JSON.stringify(that.rootCollection), { flag: \"w\" });"},{"number":103,"code":"                writeFileSync(path.join(parseLoc, \"externalReferences.json\"), JSON.stringify(that.externalReferences), { flag: \"w\" });"},{"number":104,"code":"                resolve(that.rootCollection);"},{"number":105,"code":"            });"},{"number":106,"code":"        });"},{"number":107,"code":"    }"},{"number":108,"code":""},{"number":109,"longComment":true,"comment":" !ReferenceParser/parseAsMarkdown"},{"number":110,"longComment":true,"comment":"## Parse As Markdown"},{"number":111,"longComment":true,"comment":"When a file is markdown, we parse the whole thing. "},{"number":112,"longComment":true,"comment":""},{"number":113,"code":"    parseAsMarkdown(fileName: string): Q.Promise<{}> {"},{"number":114,"code":"        logger.debug(\"parsing markdown file: \" + fileName);"},{"number":115,"code":"        let that = this;"},{"number":116,"code":"        let file: IFile = {"},{"number":117,"code":"            name: fileName,"},{"number":118,"code":"            type: \"markdown\","},{"number":119,"code":"            lines: []"},{"number":120,"code":"        };"},{"number":121,"comment":" Line numbering traditionally starts at 1","code":"        let lineNumber = 0;"},{"number":122,"code":"        return Q.Promise((resolve, reject) => {"},{"number":123,"code":"            lineReader.eachLine(fileName, (line, last) => {"},{"number":124,"code":"                let thisLine: ILine = {"},{"number":125,"code":"                    number: lineNumber"},{"number":126,"code":"                };"},{"number":127,"code":""},{"number":128,"code":"                file.lines.push(thisLine);"},{"number":129,"comment":" In Markdown all lines are considered comments","code":"                file.lines[lineNumber].comment = line;"},{"number":130,"code":""},{"number":131,"code":"                that.parseComment(file.lines[lineNumber].comment, fileName, lineNumber)"},{"number":132,"code":"                .then(() => {"},{"number":133,"code":"                    if (last) {"},{"number":134,"code":"                        that.writeOutFile(file)"},{"number":135,"code":"                        .then(() => {"},{"number":136,"code":"                            resolve(null);"},{"number":137,"code":"                            return false;"},{"number":138,"code":"                        })"},{"number":139,"code":"                        .catch((err) => {"},{"number":140,"code":"                            logger.fatal(err.message);"},{"number":141,"code":"                        });"},{"number":142,"code":"                    }"},{"number":143,"code":"                });"},{"number":144,"code":""},{"number":145,"code":"                lineNumber++;"},{"number":146,"code":"            });"},{"number":147,"code":"        });"},{"number":148,"code":"    }"},{"number":149,"code":""},{"number":150,"longComment":true,"comment":" !ReferenceParser/parseFile"},{"number":151,"longComment":true,"comment":"## Parse File "},{"number":152,"longComment":true,"comment":"Parse a file to a file map."},{"number":153,"longComment":true,"comment":""},{"number":154,"code":"    parseFile(fileName: string): Q.Promise<{}> {"},{"number":155,"code":"        logger.debug(\"parsing code file: \" + fileName);"},{"number":156,"code":"        let that = this;"},{"number":157,"code":"        let file: IFile;"},{"number":158,"code":"        let insideLongComment = false;"},{"number":159,"code":"        return Q.Promise((resolve, reject) => {"},{"number":160,"code":"            let commentRegExp;"},{"number":161,"code":"            let longCommentOpenRegExp;"},{"number":162,"code":"            let longCommentLineRegExp;"},{"number":163,"code":"            let longCommentCloseRegExp;"},{"number":164,"code":""},{"number":165,"code":"            logger.debug(\"Working on file: \" + fileName);"},{"number":166,"code":"            file = {"},{"number":167,"code":"                name: fileName,"},{"number":168,"code":"                lines: [],"},{"number":169,"code":"                type: getFileType(fileName)"},{"number":170,"code":"            };"},{"number":171,"code":""},{"number":172,"comment":" Load comment RegEx based on file type","code":"           "},{"number":173,"code":"            if (that.commentPatterns[file.type]) {"},{"number":174,"code":"                logger.debug(\"Using comment patten for \" + file.type);"},{"number":175,"code":"                commentRegExp = new RegExp(that.commentPatterns[file.type][\"commentRegExp\"]);"},{"number":176,"code":""},{"number":177,"comment":" Set RegEx for open a long comment","code":"               "},{"number":178,"code":"                if (that.commentPatterns[file.type][\"longCommentOpenRegExp\"]) longCommentOpenRegExp = new RegExp(that.commentPatterns[file.type][\"longCommentOpenRegExp\"]);"},{"number":179,"code":"                else longCommentOpenRegExp = undefined;"},{"number":180,"code":""},{"number":181,"comment":" Set RegEx for continues a long comment","code":"               "},{"number":182,"code":"                if (that.commentPatterns[file.type][\"longCommentLineRegExp\"]) longCommentLineRegExp = new RegExp(that.commentPatterns[file.type][\"longCommentLineRegExp\"]);"},{"number":183,"code":"                else longCommentLineRegExp = undefined;"},{"number":184,"code":""},{"number":185,"comment":" Set RegEx for closes a long comment","code":"               "},{"number":186,"code":"                if (that.commentPatterns[file.type][\"longCommentCloseRegExp\"]) longCommentCloseRegExp = new RegExp(that.commentPatterns[file.type][\"longCommentCloseRegExp\"]);"},{"number":187,"code":"                else longCommentLineRegExp = undefined;"},{"number":188,"code":"            } else {"},{"number":189,"code":"                logger.debug(\"Using default comment patten.\");"},{"number":190,"code":"                commentRegExp =  new RegExp(that.commentPatterns[\"default\"][\"commentRegExp\"]);"},{"number":191,"code":"                longCommentOpenRegExp = new RegExp(that.commentPatterns[\"default\"][\"longCommentOpenRegExp\"]);"},{"number":192,"code":"                longCommentLineRegExp = new RegExp(that.commentPatterns[\"default\"][\"longCommentLineRegExp\"]);"},{"number":193,"code":"                longCommentCloseRegExp = new RegExp(that.commentPatterns[\"default\"][\"longCommentCloseRegExp\"]);"},{"number":194,"code":"            }"},{"number":195,"code":""},{"number":196,"code":"            let lineNumber = 0;"},{"number":197,"comment":" Read each line of the file.","code":"           "},{"number":198,"code":"            lineReader.eachLine(fileName, (line, last) => {"},{"number":199,"code":""},{"number":200,"code":"                let thisLine: ILine = {"},{"number":201,"code":"                    number: lineNumber"},{"number":202,"code":"                };"},{"number":203,"code":"                file.lines.push(thisLine);"},{"number":204,"code":""},{"number":205,"comment":" Logic for long comments, either beginning, or already started.","code":"               "},{"number":206,"code":"                let longCommentOpenMatch;"},{"number":207,"code":"                if (longCommentOpenRegExp) {"},{"number":208,"code":"                    longCommentOpenMatch = XRegExp.exec(line, longCommentOpenRegExp, 0, false);"},{"number":209,"code":"                } else {"},{"number":210,"code":"                    longCommentOpenMatch = false;"},{"number":211,"code":"                }"},{"number":212,"code":""},{"number":213,"code":"                if (!insideLongComment && longCommentOpenMatch) {"},{"number":214,"code":"                    insideLongComment = true;"},{"number":215,"code":"                    file.lines[lineNumber].longComment = true;"},{"number":216,"code":"                }"},{"number":217,"code":""},{"number":218,"comment":" We are not inside a long comment - look for a regular comment.","code":"               "},{"number":219,"code":"                if (!insideLongComment) {"},{"number":220,"code":"                    let match = XRegExp.exec(line, commentRegExp, 0, false);"},{"number":221,"code":""},{"number":222,"comment":" Contains a tradition comment","code":"                   "},{"number":223,"code":"                    if (match) {"},{"number":224,"code":""},{"number":225,"code":"                        file.lines[lineNumber].comment = match[1];"},{"number":226,"code":"                        file.lines[lineNumber].code = line.substr(0, match.index - 1);"},{"number":227,"code":""},{"number":228,"code":"                        that.parseComment(file.lines[lineNumber].comment, fileName, lineNumber)"},{"number":229,"code":"                            .then(() => {"},{"number":230,"code":"                                if (last) {"},{"number":231,"code":"                                    that.writeOutFile(file)"},{"number":232,"code":"                                    .then(() => {"},{"number":233,"code":"                                        resolve(null);"},{"number":234,"code":"                                        return false;"},{"number":235,"code":"                                    })"},{"number":236,"code":"                                    .catch((err) => {"},{"number":237,"code":"                                        logger.fatal(err.message);"},{"number":238,"code":"                                    });"},{"number":239,"code":"                                }"},{"number":240,"code":"                            });"},{"number":241,"comment":" This is not a comment (code only)","code":"                   "},{"number":242,"code":"                    } else {"},{"number":243,"code":"                        file.lines[lineNumber].code = line;"},{"number":244,"code":"                        if (last) {"},{"number":245,"code":"                            that.writeOutFile(file)"},{"number":246,"code":"                            .then(() => {"},{"number":247,"code":"                                resolve(null);"},{"number":248,"code":"                                return false;"},{"number":249,"code":"                            })"},{"number":250,"code":"                            .catch((err) => {"},{"number":251,"code":"                                logger.fatal(err.message);"},{"number":252,"code":"                            });"},{"number":253,"code":"                        }"},{"number":254,"code":"                    }"},{"number":255,"comment":" Inside a long comment - so the whole thing is a comment","code":"               "},{"number":256,"code":"                } else {"},{"number":257,"code":""},{"number":258,"code":"                    file.lines[lineNumber].longComment = true;"},{"number":259,"code":""},{"number":260,"code":"                    if (longCommentOpenMatch) {"},{"number":261,"code":"                        file.lines[lineNumber].comment = longCommentOpenMatch[1];"},{"number":262,"code":"                    } else {"},{"number":263,"code":"                        let match = XRegExp.exec(line, longCommentLineRegExp, 0);"},{"number":264,"code":"                        if (match && match[1]) {"},{"number":265,"code":"                            file.lines[lineNumber].comment = match[1];"},{"number":266,"code":"                        } else {"},{"number":267,"comment":" Blank Line inside long comment...","code":"                            file.lines[lineNumber].comment = \"\";"},{"number":268,"code":"                        }"},{"number":269,"code":"                    }"},{"number":270,"code":""},{"number":271,"comment":" If this line contains a long comment closing symbol, then next line isn't long comment, and we can remove the closing tag","code":"                   "},{"number":272,"code":"                    if (XRegExp.exec(line, longCommentCloseRegExp, 0)) {"},{"number":273,"code":"                        file.lines[lineNumber].comment = file.lines[lineNumber].comment.replace(longCommentCloseRegExp, \"\");"},{"number":274,"code":"                        insideLongComment = false;"},{"number":275,"code":"                    };"},{"number":276,"code":""},{"number":277,"code":"                    that.parseComment(file.lines[lineNumber].comment, fileName, lineNumber)"},{"number":278,"code":"                    .then(() => {"},{"number":279,"code":"                        if (last) {"},{"number":280,"code":"                            that.writeOutFile(file)"},{"number":281,"code":"                                .then(() => {"},{"number":282,"code":"                                    resolve(null);"},{"number":283,"code":"                                    return false;"},{"number":284,"code":"                                })"},{"number":285,"code":"                                .catch((err) => {"},{"number":286,"code":"                                    logger.fatal(err.message);"},{"number":287,"code":"                                });"},{"number":288,"code":"                        }"},{"number":289,"code":"                    });"},{"number":290,"code":""},{"number":291,"comment":" If this is the last line, then we can wrap things up.","code":"                   "},{"number":292,"code":"                    if (last) {"},{"number":293,"code":"                        that.writeOutFile(file)"},{"number":294,"code":"                        .then(() => {"},{"number":295,"code":"                            resolve(null);"},{"number":296,"code":"                            return false;"},{"number":297,"code":"                        })"},{"number":298,"code":"                        .catch((err) => {"},{"number":299,"code":"                            logger.fatal(err.message);"},{"number":300,"code":"                        });"},{"number":301,"code":"                    }"},{"number":302,"code":"                }"},{"number":303,"code":""},{"number":304,"code":"                lineNumber++;"},{"number":305,"code":"            });"},{"number":306,"code":"        });"},{"number":307,"code":"    }"},{"number":308,"code":""},{"number":309,"longComment":true,"comment":" !ReferenceParser/writeOutFile"},{"number":310,"longComment":true,"comment":"## Write Out File"},{"number":311,"longComment":true,"comment":"Writes out a file map"},{"number":312,"longComment":true,"comment":""},{"number":313,"code":"    writeOutFile(file: IFile) {"},{"number":314,"code":"        let that = this;"},{"number":315,"code":"        return Q.Promise<{}>((resolve, reject) => {"},{"number":316,"code":"            let filePathArray = path.join(parseLoc, file.name + \".json\").split(\"/\");"},{"number":317,"code":"            filePathArray.pop();"},{"number":318,"code":"            let filePath = filePathArray.join(\"/\");"},{"number":319,"code":"            mkdirp(filePath, function (err) {"},{"number":320,"code":"                if (err) {"},{"number":321,"code":"                    logger.fatal(err.message);"},{"number":322,"code":"                    reject(err);"},{"number":323,"code":"                }"},{"number":324,"code":"                else {"},{"number":325,"code":"                    logger.debug(\"Saving output for: \" + file.name);"},{"number":326,"code":"                    writeFileSync(path.join(parseLoc, file.name + \".json\"), JSON.stringify(file), { flag: \"w\" });"},{"number":327,"code":"                    resolve(null);"},{"number":328,"code":"                }"},{"number":329,"code":"            });"},{"number":330,"code":"        });"},{"number":331,"code":"    }"},{"number":332,"code":""},{"number":333,"longComment":true,"comment":" !ReferenceParser/parseComment"},{"number":334,"longComment":true,"comment":"## Parse Comment"},{"number":335,"longComment":true,"comment":"Once a comment is found (see @ReferenceParser/parseFile above for example) this will parse"},{"number":336,"longComment":true,"comment":"that commant for anchors. It will add those anchors to the @interfaces/IReferenceCollection "},{"number":337,"longComment":true,"comment":"for the entire project."},{"number":338,"longComment":true,"comment":""},{"number":339,"code":"    parseComment(comment: string, fileName: string, lineNumber: number): Q.Promise<{}> {"},{"number":340,"code":"        let that = this;"},{"number":341,"code":"        return Q.Promise<{}>((resolve, reject) => {"},{"number":342,"code":"            let pos = 0;"},{"number":343,"code":"            let match;"},{"number":344,"code":""},{"number":345,"code":"            while (match = XRegExp.exec(comment, that.anchorRegExp, pos, false)) {"},{"number":346,"code":"                logger.debug(\"found anchor: \" + match[1]);"},{"number":347,"code":""},{"number":348,"code":"                let parts = match[1].split(\"/\");"},{"number":349,"code":""},{"number":350,"code":"                that.rootCollection.addAnchorTag(parts, fileName, lineNumber);"},{"number":351,"code":"                resolve(null);"},{"number":352,"code":""},{"number":353,"code":"                pos = match.index + match[0].length;"},{"number":354,"code":"            }"},{"number":355,"code":"            resolve(null);"},{"number":356,"code":"        });"},{"number":357,"code":"    };"},{"number":358,"code":"}"},{"number":359,"code":""},{"number":360,"longComment":true,"comment":" !ReferenceParser/example-output/reference-collection"},{"number":361,"longComment":true,"comment":"### Example output JSON file for references"},{"number":362,"longComment":true,"comment":"```json"},{"number":363,"longComment":true,"comment":" {"},{"number":364,"longComment":true,"comment":"  \"id\": \"duly-noted\","},{"number":365,"longComment":true,"comment":"  \"anchors\": ["},{"number":366,"longComment":true,"comment":"       {"},{"number":367,"longComment":true,"comment":"           \"id\": \"license\","},{"number":368,"longComment":true,"comment":"           \"line\": 1,"},{"number":369,"longComment":true,"comment":"           \"file\": \"./license.md\""},{"number":370,"longComment":true,"comment":"       },"},{"number":371,"longComment":true,"comment":"       ..."},{"number":372,"longComment":true,"comment":"   ],"},{"number":373,"longComment":true,"comment":"   \"subcollections\": ["},{"number":374,"longComment":true,"comment":"       {"},{"number":375,"longComment":true,"comment":"           \"id\": \"Index\","},{"number":376,"longComment":true,"comment":"           \"anchors\": ["},{"number":377,"longComment":true,"comment":"               {"},{"number":378,"longComment":true,"comment":"                   \"id\": \"main\","},{"number":379,"longComment":true,"comment":"                   \"line\": 0,"},{"number":380,"longComment":true,"comment":"                   \"file\": \"./ts/index.ts\""},{"number":381,"longComment":true,"comment":"               },"},{"number":382,"longComment":true,"comment":"               {"},{"number":383,"longComment":true,"comment":"                   \"id\": \"run\","},{"number":384,"longComment":true,"comment":"                   \"line\": 21,"},{"number":385,"longComment":true,"comment":"                   \"file\": \"./ts/index.ts\""},{"number":386,"longComment":true,"comment":"               },"},{"number":387,"longComment":true,"comment":"               {"},{"number":388,"longComment":true,"comment":"                   \"id\": \"getFiles\","},{"number":389,"longComment":true,"comment":"                   \"line\": 162,"},{"number":390,"longComment":true,"comment":"                   \"file\": \"./ts/index.ts\""},{"number":391,"longComment":true,"comment":"               },"},{"number":392,"longComment":true,"comment":"               {"},{"number":393,"longComment":true,"comment":"                   \"id\": \"deleteDir\","},{"number":394,"longComment":true,"comment":"                   \"line\": 175,"},{"number":395,"longComment":true,"comment":"                   \"file\": \"./ts/index.ts\""},{"number":396,"longComment":true,"comment":"               }"},{"number":397,"longComment":true,"comment":"           ],"},{"number":398,"longComment":true,"comment":"           \"subcollections\": []"},{"number":399,"longComment":true,"comment":"       },"},{"number":400,"longComment":true,"comment":"       ..."},{"number":401,"longComment":true,"comment":"   }"},{"number":402,"longComment":true,"comment":"```"},{"number":403,"longComment":true,"comment":""},{"number":404,"longComment":true,"comment":"!ReferenceParser/example-output/code-map"},{"number":405,"longComment":true,"comment":"## Example Output JSON map for code file."},{"number":406,"longComment":true,"comment":"```json"},{"number":407,"longComment":true,"comment":"{"},{"number":408,"longComment":true,"comment":"   \"name\": \"./ts/index.ts\","},{"number":409,"longComment":true,"comment":"   \"lines\": ["},{"number":410,"longComment":true,"comment":"       ..."},{"number":411,"longComment":true,"comment":"       {"},{"number":412,"longComment":true,"comment":"           \"number\": 5,"},{"number":413,"longComment":true,"comment":"           \"longComment\": true,"},{"number":414,"longComment":true,"comment":"           \"comment\": \"This is the entry file to Duly Noted, \""},{"number":415,"longComment":true,"comment":"       },"},{"number":416,"longComment":true,"comment":"       {"},{"number":417,"longComment":true,"comment":"           \"number\": 6,"},{"number":418,"longComment":true,"comment":"           \"longComment\": true,"},{"number":419,"longComment":true,"comment":"           \"comment\": \"it contains function that launches from the Command Line\""},{"number":420,"longComment":true,"comment":"       },"},{"number":421,"longComment":true,"comment":"       {"},{"number":422,"longComment":true,"comment":"           \"number\": 7,"},{"number":423,"longComment":true,"comment":"           \"longComment\": true,"},{"number":424,"longComment":true,"comment":"           \"comment\": \"\""},{"number":425,"longComment":true,"comment":"       },"},{"number":426,"longComment":true,"comment":"       {"},{"number":427,"longComment":true,"comment":"           \"number\": 8,"},{"number":428,"longComment":true,"comment":"           \"code\": \"import {IConfig} from \\\"./classes/IConfig\\\";\""},{"number":429,"longComment":true,"comment":"       },"},{"number":430,"longComment":true,"comment":"       ..."},{"number":431,"longComment":true,"comment":"   ]"},{"number":432,"longComment":true,"comment":"}"},{"number":433,"longComment":true,"comment":""},{"number":434,"longComment":true,"comment":"```"},{"number":435,"longComment":true,"comment":""}],"type":"typescript"}