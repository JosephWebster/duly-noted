{"name":"./ts/generators/htmlGenerator.ts","lines":[{"number":0,"longComment":true,"comment":""},{"number":1,"longComment":true,"comment":"# !HtmlGenerator"},{"number":2,"longComment":true,"comment":"@authors/chris"},{"number":3,"longComment":true,"comment":"@license"},{"number":4,"longComment":true,"comment":""},{"number":5,"longComment":true,"comment":"Generates HTML pages for the source code,"},{"number":6,"longComment":true,"comment":"replacing links and anchors as it goes along."},{"number":7,"longComment":true,"comment":"Builds a nice Index.html page with info and"},{"number":8,"longComment":true,"comment":"README.md content."},{"number":9,"longComment":true,"comment":""},{"number":10,"longComment":true,"comment":"Uses tempalate that employ handlebars as the"},{"number":11,"longComment":true,"comment":"templating engine."},{"number":12,"longComment":true,"comment":""},{"number":13,"comment":""},{"number":14,"code":""},{"number":15,"code":"import {IAnchor, ITag, ReferenceCollection} from \"../classes/referenceCollection\";"},{"number":16,"code":"import {parseLoc} from \"../modules/referenceParser\";"},{"number":17,"code":"import {Config, IExternalReference} from \"../classes/IConfig\";"},{"number":18,"code":"import {readFiles, files} from \"node-dir\";"},{"number":19,"code":"import {IFile, ILine} from \"../classes/IFile\";"},{"number":20,"code":"import {writeFileSync, mkdirSync, accessSync, F_OK, unlinkSync, readFileSync} from \"fs\";"},{"number":21,"code":"import mkdirp = require(\"mkdirp\");"},{"number":22,"code":"import * as path from \"path\";"},{"number":23,"code":"import XRegExp = require(\"xregexp\");"},{"number":24,"code":"import * as handlebars from \"handlebars\";"},{"number":25,"code":"import * as marked from \"marked\";"},{"number":26,"code":"import * as fse from \"fs-extra\";"},{"number":27,"code":"import _ = require(\"underscore\");"},{"number":28,"code":"import Q = require(\"q\");"},{"number":29,"code":"import log4js = require(\"log4js\");"},{"number":30,"code":"let logger = log4js.getLogger(\"duly-noted::HtmlGenerator\");"},{"number":31,"code":""},{"number":32,"longComment":true,"comment":""},{"number":33,"longComment":true,"comment":"!interfaces/IHtmlGenerator"},{"number":34,"comment":""},{"number":35,"code":"export interface IHtmlGenerator {"},{"number":36,"code":""},{"number":37,"code":"}"},{"number":38,"code":""},{"number":39,"longComment":true,"comment":""},{"number":40,"longComment":true,"comment":"## !classes/HtmlGenerator"},{"number":41,"comment":""},{"number":42,"code":"export class HtmlGenerator implements IHtmlGenerator {"},{"number":43,"code":"    outputDir: string;"},{"number":44,"code":"    collection: ReferenceCollection;"},{"number":45,"code":"    anchorRegExp: RegExp;"},{"number":46,"code":"    linkRegExp: RegExp;"},{"number":47,"code":"    template: any;"},{"number":48,"code":"    indexTemplate: any;"},{"number":49,"code":"    projectPath: string;"},{"number":50,"code":"    referenceCollection: ReferenceCollection;"},{"number":51,"code":"    tags: ITag[] = [];"},{"number":52,"code":"    externalReferences: IExternalReference[];"},{"number":53,"code":"    readme: string;"},{"number":54,"code":"    projectName: string;"},{"number":55,"code":""},{"number":56,"longComment":true,"comment":""},{"number":57,"longComment":true,"comment":"### Creates an instance of @classes/HtmlGenerator"},{"number":58,"comment":""},{"number":59,"code":"    constructor(config: Config, logLevel?: string) {"},{"number":60,"code":"        logger.setLevel(logLevel || \"DEBUG\");"},{"number":61,"code":"        this.outputDir = config.outputDir;"},{"number":62,"code":"        this.collection = JSON.parse(readFileSync(path.join(parseLoc, \"internalReferences.json\")).toString());"},{"number":63,"code":"        this.anchorRegExp = new RegExp(config.anchorRegExp);"},{"number":64,"code":"        this.linkRegExp = new RegExp(config.linkRegExp);"},{"number":65,"code":"        this.referenceCollection = new ReferenceCollection(\"\").inflate(JSON.parse(readFileSync(path.join(parseLoc, \"internalReferences.json\")).toString()));"},{"number":66,"code":"        this.externalReferences = JSON.parse(readFileSync(path.join(parseLoc, \"externalReferences.json\")).toString());"},{"number":67,"code":"        this.tags = this.referenceCollection.getAllTags();"},{"number":68,"code":"        let projectPathArray = __dirname.split(\"/\");"},{"number":69,"code":"        projectPathArray.pop();"},{"number":70,"code":"        this.projectPath = projectPathArray.join(\"/\");"},{"number":71,"code":""},{"number":72,"code":"        this.template = handlebars.compile(readFileSync(path.join(this.projectPath, \"templates\", \"stacked.html\")).toString());"},{"number":73,"code":"        this.indexTemplate = handlebars.compile(readFileSync(path.join(this.projectPath, \"templates\", \"index.html\")).toString());"},{"number":74,"code":""},{"number":75,"code":"        this.projectName = config.projectName;"},{"number":76,"code":"        this.readme = config.readme;"},{"number":77,"code":""},{"number":78,"code":"        handlebars.registerHelper(\"md\", this.markdownHelper);"},{"number":79,"code":"        handlebars.registerHelper(\"ifCond\", this.ifCondHelper);"},{"number":80,"code":"    }"},{"number":81,"code":""},{"number":82,"code":""},{"number":83,"longComment":true,"comment":""},{"number":84,"longComment":true,"comment":"## Generate HTML Docs"},{"number":85,"longComment":true,"comment":"Creates HTML docs for a set of file maps and reference maps set on @classes/HtmlGenerator construction."},{"number":86,"comment":""},{"number":87,"code":"    public generate(): Q.IPromise<{}> {"},{"number":88,"code":"        return Q.Promise((resolve, reject) => {"},{"number":89,"code":"            logger.info(\"Generating HTML Documents\");"},{"number":90,"code":"            let that = this;"},{"number":91,"code":"            readFiles(parseLoc, {match: /.json$/, exclude: /internalReferences.json|externalReferences.json/, recursive: true}, (err, content, next) => {"},{"number":92,"code":"                that.proccessFile(err, content, next, that.outputDir);"},{"number":93,"code":"            }, (err, files) => {"},{"number":94,"code":"                that.generateIndexPage();"},{"number":95,"code":"                resolve(null);"},{"number":96,"code":"            });"},{"number":97,"code":""},{"number":98,"code":"            fse.copySync(path.join(this.projectPath, \"templates\", \"highlight.pack.js\"), path.join(this.outputDir, \"scripts/highlight.js\"));"},{"number":99,"code":"            fse.copySync(path.join(this.projectPath, \"templates\", \"css\", \"default.css\"), path.join(this.outputDir, \"css/default.css\"));"},{"number":100,"code":"        });"},{"number":101,"code":"    }"},{"number":102,"code":""},{"number":103,"longComment":true,"comment":""},{"number":104,"longComment":true,"comment":"## Process Files"},{"number":105,"longComment":true,"comment":"Processes the file map for a file, making output decisions based on"},{"number":106,"longComment":true,"comment":"code, comment, long comment presence"},{"number":107,"comment":""},{"number":108,"code":"    proccessFile(err: Error, content: string, next: Function, outputDir: string): void {"},{"number":109,"code":"        let file: IFile = JSON.parse(content);"},{"number":110,"code":"        logger.debug(\"Processing \" + file.name);"},{"number":111,"code":""},{"number":112,"code":""},{"number":113,"code":"        for (let i = 0; i < file.lines.length; i++) {"},{"number":114,"code":"            if (typeof(file.lines[i].comment) === \"string\" && file.lines[i].comment !== \"\" && file.lines[i].comment !== null) {"},{"number":115,"code":"                file.lines[i].comment = this.replaceAnchors(file.lines[i].comment, file.name, i);"},{"number":116,"code":"                file.lines[i].comment = this.replaceExternalLinks(file.lines[i].comment, file.name, i);"},{"number":117,"code":"                file.lines[i].comment = this.replaceInternalLinks(file.lines[i].comment, file.name, i);"},{"number":118,"code":"            }"},{"number":119,"code":"        }"},{"number":120,"code":""},{"number":121,"code":"        let outputMap = {"},{"number":122,"code":"            project: this.projectName,"},{"number":123,"code":"            items: [],"},{"number":124,"code":"            type: file.name,"},{"number":125,"code":"            name: file.type,"},{"number":126,"code":"            linkPrefix: this.getLinkPrefix(file.name)"},{"number":127,"code":"        };"},{"number":128,"code":""},{"number":129,"code":"         for (let i = 0; i < file.lines.length; i++) {"},{"number":130,"code":"            if (typeof(file.lines[i].comment) === \"string\" && file.lines[i].comment !== null) {"},{"number":131,"code":"                if (outputMap.items.length > 0 && outputMap.items[outputMap.items.length - 1].type === \"comment\") {"},{"number":132,"code":"                     outputMap.items[outputMap.items.length - 1].content +=  \"\\n\" + file.lines[i].comment;"},{"number":133,"code":"                } else {"},{"number":134,"code":"                     outputMap.items.push({content: file.lines[i].comment, type: \"comment\", longComment: file.lines[i].longComment || false });"},{"number":135,"code":"                }"},{"number":136,"code":"            }"},{"number":137,"code":""},{"number":138,"code":"            if (typeof(file.lines[i].code) === \"string\" && file.lines[i].code !== null) {"},{"number":139,"code":"                if (outputMap.items.length > 0 && outputMap.items[outputMap.items.length - 1].type === \"code\") {"},{"number":140,"code":"                     outputMap.items[outputMap.items.length - 1].content  +=  \"\\n\" + file.lines[i].code;"},{"number":141,"code":"                } else {"},{"number":142,"code":"                    outputMap.items.push({content: file.lines[i].code, type: \"code\", lang: file.type});"},{"number":143,"code":"                }"},{"number":144,"code":"            }"},{"number":145,"code":"         }"},{"number":146,"code":"        let output = this.template(outputMap);"},{"number":147,"code":""},{"number":148,"code":"        let filePathArray = path.join(outputDir, file.name + \".md\").split(\"/\");"},{"number":149,"code":"        filePathArray.pop();"},{"number":150,"code":"        let filePath = filePathArray.join(\"/\");"},{"number":151,"code":""},{"number":152,"code":"        mkdirp(filePath, function (err) {"},{"number":153,"code":"            if (err) {"},{"number":154,"code":"                logger.fatal(err.message);"},{"number":155,"code":"            }"},{"number":156,"code":"            else {"},{"number":157,"code":"                logger.debug(\"Saving output for \" + file.type + \" file \" + file.name + \" as \" + file.name + \".html\");"},{"number":158,"code":"                writeFileSync(path.join(outputDir, file.name + \".html\"), output, { flag: \"w\" });"},{"number":159,"code":"                next();"},{"number":160,"code":"            }"},{"number":161,"code":"        });"},{"number":162,"code":"    }"},{"number":163,"code":""},{"number":164,"longComment":true,"comment":""},{"number":165,"longComment":true,"comment":"## Replace Anchors"},{"number":166,"longComment":true,"comment":"Processes a comment line, replacing anchors with a:href anchor tags"},{"number":167,"comment":""},{"number":168,"code":"    replaceAnchors(comment: string,  fileName: string, line: number) {"},{"number":169,"code":"        let pos = 0;"},{"number":170,"code":"        let match;"},{"number":171,"code":"        let newComment: string = comment;"},{"number":172,"comment":" Look at the line for anchors - replace them with links. ","code":"       "},{"number":173,"code":"        while (match = XRegExp.exec(newComment, this.anchorRegExp, pos, false)) {"},{"number":174,"code":"            newComment =  newComment.substr(0, match.index) +"},{"number":175,"code":"            \" <a name=\\\"\" + match[1] + \"\\\"><span class=\\\"glyphicon glyphicon-link\\\" aria-hidden=\\\"true\\\"></span>\" + match[1] + \"</a> \" +"},{"number":176,"code":"            newComment.substr(match.index + match[0].length);"},{"number":177,"code":""},{"number":178,"code":"            pos = match.index + match[0].length;"},{"number":179,"code":"        }"},{"number":180,"code":""},{"number":181,"code":"        return newComment;"},{"number":182,"code":"    }"},{"number":183,"code":""},{"number":184,"code":""},{"number":185,"longComment":true,"comment":""},{"number":186,"longComment":true,"comment":"## Replace Links"},{"number":187,"longComment":true,"comment":"> Run this AFTER external link replacement to ensure warning accuracy"},{"number":188,"longComment":true,"comment":"Processes a comment line, replacing links with links"},{"number":189,"comment":""},{"number":190,"code":"    replaceInternalLinks(comment: string, fileName: string, line: number) {"},{"number":191,"code":"        let pos = 0;"},{"number":192,"code":"        let match;"},{"number":193,"code":"        let newComment: string = comment;"},{"number":194,"code":""},{"number":195,"code":"        let linkPrefix = this.getLinkPrefix(fileName);"},{"number":196,"code":""},{"number":197,"comment":" Look at the line for anchors - replace them with links. ","code":"       "},{"number":198,"code":"        while (match = XRegExp.exec(newComment, this.linkRegExp, pos, false)) {"},{"number":199,"code":"            let tag =  _.findWhere(this.tags, {anchor: match[1]});"},{"number":200,"code":"            if (!tag) {"},{"number":201,"code":"                logger.warn(\"link: \" + match[1] + \" in \" + fileName + \":\" + line + \" does not have a cooresponding anchor, so link cannot be created.\");"},{"number":202,"code":"            } else {"},{"number":203,"code":"                logger.debug(\"found internal link: \" + match[1]);"},{"number":204,"code":"                newComment =  comment.substr(0, match.index) +"},{"number":205,"code":"                \" [\" + match[1] + \"](\" + linkPrefix + tag.path + \".html#\" + match[1] + \") \" +"},{"number":206,"code":"                newComment.substr(match.index + match[0].length);"},{"number":207,"code":"            }"},{"number":208,"code":"            pos = match.index + match[0].length;"},{"number":209,"code":"        }"},{"number":210,"code":""},{"number":211,"code":"        return newComment;"},{"number":212,"code":"    }"},{"number":213,"code":""},{"number":214,"longComment":true,"comment":""},{"number":215,"longComment":true,"comment":"## Replace External Links"},{"number":216,"longComment":true,"comment":"> Run this BEFORE internal link replacement"},{"number":217,"longComment":true,"comment":"Processes a comment line, replacing links with links to external urls"},{"number":218,"comment":""},{"number":219,"code":"    replaceExternalLinks(comment: string, fileName: string, line: number) {"},{"number":220,"code":"        let pos = 0;"},{"number":221,"code":"        let match;"},{"number":222,"code":"        let newComment: string = comment;"},{"number":223,"code":""},{"number":224,"comment":" Look at the line for external references - replace them with links. ","code":"       "},{"number":225,"code":"        while (match = XRegExp.exec(newComment, this.linkRegExp, pos, false)) {"},{"number":226,"code":"            let tagArray = match[1].split(\"/\");"},{"number":227,"code":"            let tag =  _.findWhere(this.externalReferences, {anchor: tagArray[0]});"},{"number":228,"code":""},{"number":229,"code":"            if (tag) {"},{"number":230,"code":"                logger.debug(\"found external link: \" + match[1]);"},{"number":231,"code":"                for (let i = 1; i < tagArray.length; i++) {"},{"number":232,"code":"                    tag.path = tag.path.replace(\"::\", tagArray[i]);"},{"number":233,"code":"                }"},{"number":234,"code":""},{"number":235,"code":"                newComment =  comment.substr(0, match.index - 1) +"},{"number":236,"code":"                \" [\" + match[1] + \"](\" + tag.path + \") \" +"},{"number":237,"code":"                newComment.substr(match.index + match[0].length);"},{"number":238,"code":"            }"},{"number":239,"code":""},{"number":240,"code":"            pos = match.index + match[0].length;"},{"number":241,"code":"        }"},{"number":242,"code":"        return newComment;"},{"number":243,"code":"    }"},{"number":244,"code":""},{"number":245,"longComment":true,"comment":""},{"number":246,"longComment":true,"comment":"## Generates the \"Index Page\""},{"number":247,"longComment":true,"comment":"This generates the index page, listing all the link collections,"},{"number":248,"longComment":true,"comment":"and sucks in the README."},{"number":249,"comment":""},{"number":250,"code":"    generateIndexPage(): void {"},{"number":251,"code":"        logger.info(\"generating index.html\");"},{"number":252,"code":"        let that = this;"},{"number":253,"code":""},{"number":254,"code":"        let outputMap = {"},{"number":255,"code":"            project: this.projectName,"},{"number":256,"code":"            collections: [],"},{"number":257,"code":"            files: [],"},{"number":258,"code":"            readme: \"\""},{"number":259,"code":"        };"},{"number":260,"code":""},{"number":261,"comment":" collections","code":"       "},{"number":262,"code":"        let collections = that.referenceCollection.getTagsByCollection();"},{"number":263,"code":""},{"number":264,"code":"        for (let i = 0; i < collections.length; i++) {"},{"number":265,"code":"            let anchors = _.clone(collections[i].anchors);"},{"number":266,"code":"            for (let x = 0; x < anchors.length; x++) {"},{"number":267,"code":"                let linkPrefix = that.getLinkPrefix(anchors[x].path);"},{"number":268,"code":"                anchors[x].path = anchors[x].path + \".html#\" + anchors[x].linkStub;"},{"number":269,"code":"            }"},{"number":270,"code":""},{"number":271,"code":"            let name = collections[i].name.split(\"/\");"},{"number":272,"code":"            name.shift();"},{"number":273,"code":"            name.shift();"},{"number":274,"code":"            name = name.join(\"/\");"},{"number":275,"code":""},{"number":276,"code":"            outputMap.collections.push({"},{"number":277,"code":"                name: name,"},{"number":278,"code":"                anchors: anchors"},{"number":279,"code":"            });"},{"number":280,"code":"        }"},{"number":281,"code":""},{"number":282,"code":"        files(this.outputDir, (error, files) => {"},{"number":283,"code":""},{"number":284,"comment":" Files","code":"           "},{"number":285,"code":"            for (let i = 0; i < files.length; i++) {"},{"number":286,"code":"                let fileNameArray = files[i].split(\".\");"},{"number":287,"code":"                let extension = fileNameArray[fileNameArray.length - 1];"},{"number":288,"code":"                if (extension === \"html\") {"},{"number":289,"code":"                    let pathArray: string[] = files[i].split(\"/\");"},{"number":290,"comment":" shift the output dir off the file name.","code":"                    pathArray.shift();"},{"number":291,"code":"                    let path = pathArray.join(\"/\");"},{"number":292,"code":"                    outputMap.files.push({path: path});"},{"number":293,"code":"                }"},{"number":294,"code":"            }"},{"number":295,"code":""},{"number":296,"code":"            outputMap.readme = readFileSync(that.readme).toString();"},{"number":297,"code":"            let output = this.indexTemplate(outputMap);"},{"number":298,"code":"            writeFileSync(path.join(that.outputDir, \"index.html\"), output, { flag: \"w\" });"},{"number":299,"code":"        });"},{"number":300,"code":"    }"},{"number":301,"code":""},{"number":302,"longComment":true,"comment":""},{"number":303,"longComment":true,"comment":"Generate a link Prefix from a fileName"},{"number":304,"longComment":true,"comment":"> NOTE: Without this code, links will not properly navigated to deeply nested pages with relative linking."},{"number":305,"comment":""},{"number":306,"code":"    getLinkPrefix(fileName: string): string {"},{"number":307,"code":"        let fileNameAsArray = fileName.split(\"/\");"},{"number":308,"code":"        let linkPrefix = \"\";"},{"number":309,"code":"        for (let i = 0; i < fileNameAsArray.length - 2; i++) {"},{"number":310,"code":"            linkPrefix += \"../\";"},{"number":311,"code":"        }"},{"number":312,"code":""},{"number":313,"code":"        return linkPrefix;"},{"number":314,"code":"    }"},{"number":315,"code":""},{"number":316,"code":"    markdownHelper(context, options) {"},{"number":317,"code":"       return marked(context);"},{"number":318,"code":"    }"},{"number":319,"code":""},{"number":320,"code":"    ifCondHelper(v1, v2, options) {"},{"number":321,"code":"        if (v1 === v2) {"},{"number":322,"code":"            return options.fn(this);"},{"number":323,"code":"        }"},{"number":324,"code":"        return options.inverse(this);"},{"number":325,"code":"    };"},{"number":326,"code":"}"}],"type":"typescript"}