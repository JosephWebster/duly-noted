{"name":"./ts/index.ts","lines":[{"number":0,"longComment":true,"comment":" !Index/main"},{"number":1,"longComment":true,"comment":"# Main Program File"},{"number":2,"longComment":true,"comment":"@authors/chris"},{"number":3,"longComment":true,"comment":"@license"},{"number":4,"longComment":true,"comment":""},{"number":5,"longComment":true,"comment":"This is the entry file to Duly Noted, "},{"number":6,"longComment":true,"comment":"it contains function that launches from the Command Line"},{"number":7,"longComment":true,"comment":""},{"number":8,"code":"import {IConfig} from \"./classes/IConfig\";"},{"number":9,"code":"import program = require(\"commander\");"},{"number":10,"code":"import {writeFileSync, mkdirSync, accessSync, F_OK, unlinkSync, readFileSync, readdirSync, rmdirSync, statSync} from \"fs\";"},{"number":11,"code":"import {ReferenceParser, parseLoc} from \"./modules/referenceParser\";"},{"number":12,"code":"import _ = require(\"underscore\");"},{"number":13,"code":"import * as path from \"path\";"},{"number":14,"code":"import glob = require(\"glob\");"},{"number":15,"code":"import Q = require(\"q\");"},{"number":16,"code":"import {MarkdownGenerator} from \"./generators/markdownGenerator\";"},{"number":17,"code":"import {HtmlGenerator} from \"./generators/htmlGenerator\";"},{"number":18,"code":"import log4js = require(\"log4js\");"},{"number":19,"code":"let logger = log4js.getLogger(\"duly-noted::run\");"},{"number":20,"code":""},{"number":21,"longComment":true,"comment":" !Index/run"},{"number":22,"longComment":true,"comment":"## Run"},{"number":23,"longComment":true,"comment":""},{"number":24,"longComment":true,"comment":"Basic code flow is:"},{"number":25,"longComment":true,"comment":""},{"number":26,"longComment":true,"comment":"1. parse the cofiguration options using the following order of precedence:"},{"number":27,"longComment":true,"comment":"     1. Command Line Input"},{"number":28,"longComment":true,"comment":"     2. User's Config File (`duly-noted.json`)"},{"number":29,"longComment":true,"comment":"     3. Defaults values (see @issue/3)"},{"number":30,"longComment":true,"comment":"2. get the files and pass those to the @ReferenceParser/parse"},{"number":31,"longComment":true,"comment":"3. output the reponse to either/both @HtmlGenerator/generate or @MarkdownGenerator/generate"},{"number":32,"longComment":true,"comment":""},{"number":33,"code":"export function run() {"},{"number":34,"code":"    logger.info(\"Welcome to Duly Noted.\");"},{"number":35,"code":"    let logLevel: string;"},{"number":36,"code":"    let config: IConfig;"},{"number":37,"code":"    let defaults: IConfig = JSON.parse(readFileSync(__dirname + \"/../bin/defaults.json\").toString());"},{"number":38,"code":"    let packageJSON: any = JSON.parse(readFileSync(__dirname + \"/../package.json\").toString());"},{"number":39,"code":"    logger.info(packageJSON.description);"},{"number":40,"code":""},{"number":41,"code":"    program"},{"number":42,"code":"        .version(packageJSON.version)"},{"number":43,"code":"        .option(\"-c, --config <file>\", \"Path to duly-noted.json\", \"duly-noted.json\")"},{"number":44,"code":"        .option(\"-o, --outputDir <path>\", \"Path to output docs to\")"},{"number":45,"code":"        .option(\"-g, --generator <generator>\", \"Generator to use.\")"},{"number":46,"code":"        .option(\"-i, --init\", \"Creates a default duly-noted.json file\")"},{"number":47,"code":"        .option(\"-v, --verbose\", \"Chatty Cathy mode\")"},{"number":48,"code":"        .parse(process.argv);"},{"number":49,"code":""},{"number":50,"comment":"### Set verbose mode","code":"   "},{"number":51,"code":"    if (program.verbose) {"},{"number":52,"code":"        logLevel = \"DEUBG\";"},{"number":53,"code":"    } else {"},{"number":54,"code":"        logLevel = \"INFO\";"},{"number":55,"code":"    }"},{"number":56,"code":"    logger.setLevel(logLevel);"},{"number":57,"code":""},{"number":58,"code":""},{"number":59,"comment":"!Index/init","code":"   "},{"number":60,"comment":"### Init - copies example duly-noted.json from @default-duly-noted-json","code":"   "},{"number":61,"code":"    if (program.init) {"},{"number":62,"code":"        try {"},{"number":63,"code":"            let config = JSON.parse(readFileSync(\"duly-noted.json\").toString());"},{"number":64,"code":"            logger.fatal(\"It looks like you already have a 'duly-noted.json' file. Please just update that one.\");"},{"number":65,"code":"            return;"},{"number":66,"code":"        } catch (err) {"},{"number":67,"code":"            let projectPathArray = __dirname.split(\"/\");"},{"number":68,"code":"            let projectPath = projectPathArray.join(\"/\");"},{"number":69,"code":"            let dnJSON = readFileSync(path.join(projectPath, \"/../bin/default.duly-noted.json\")).toString();"},{"number":70,"code":"            writeFileSync(\"duly-noted.json\", dnJSON);"},{"number":71,"code":"            logger.info(\"duly-noted.json file created. YOU SHOULD UPDATE IT TO FIT YOUR NEEDS.\");"},{"number":72,"code":"            logger.info(\"Seriously, stop reading the console, and go update your brand new duly-noted.json file aleady!\");"},{"number":73,"code":"            return;"},{"number":74,"code":"        }"},{"number":75,"code":"    }"},{"number":76,"code":""},{"number":77,"comment":"### Load the config file, or advise init","code":"   "},{"number":78,"code":"    try {"},{"number":79,"code":"        logger.info(\"Parsing config file.\")"},{"number":80,"code":"        config = JSON.parse(readFileSync(program.config).toString());"},{"number":81,"code":"    } catch (error) {"},{"number":82,"code":"        logger.error(error.message);"},{"number":83,"code":"        logger.warn(\"Error reading config file: \" + program.config + \" Try running init first.\");"},{"number":84,"code":"        return;"},{"number":85,"code":"    }"},{"number":86,"code":""},{"number":87,"longComment":true,"comment":""},{"number":88,"longComment":true,"comment":"## Set settings"},{"number":89,"longComment":true,"comment":"Settings are in order of precedence"},{"number":90,"longComment":true,"comment":""},{"number":91,"longComment":true,"comment":"1. Command Line Input"},{"number":92,"longComment":true,"comment":"2. User's Config File"},{"number":93,"longComment":true,"comment":"3. Defaults values (see @issue/3)"},{"number":94,"longComment":true,"comment":""},{"number":95,"code":""},{"number":96,"comment":" Set outputDir","code":"   "},{"number":97,"code":"    config.outputDir = program.outputDir || config.outputDir || defaults.outputDir;"},{"number":98,"code":""},{"number":99,"comment":" Set generator","code":"   "},{"number":100,"code":"    if (program.generator) {"},{"number":101,"code":"        config.generators = [program.generator];"},{"number":102,"code":"    } else {"},{"number":103,"code":"        config.generators = config.generators || defaults.generators;"},{"number":104,"code":"    }"},{"number":105,"code":""},{"number":106,"comment":" Get file actions","code":"   "},{"number":107,"code":"    let getFiles: Q.IPromise<string[]>[] = [];"},{"number":108,"code":""},{"number":109,"code":"    for (let i = 0; i < config.files.length; i++) {"},{"number":110,"code":"        getFiles.push(getFilesFromGlob(config.files[i]));"},{"number":111,"code":"    }"},{"number":112,"code":""},{"number":113,"code":"    logger.debug(\"Starting Reference Parsing.\");"},{"number":114,"code":""},{"number":115,"comment":" Run @Index/getFiles on each glob, wait for all actions.","code":"   "},{"number":116,"code":"    Q.all(getFiles)"},{"number":117,"code":"        .then((results) => {"},{"number":118,"code":"            let files = _.flatten(results);"},{"number":119,"code":"            let referenceParser = new ReferenceParser(config, logLevel);"},{"number":120,"code":""},{"number":121,"longComment":true,"comment":""},{"number":122,"longComment":true,"comment":"Then pass each of the files into the @ReferenceParser/parse"},{"number":123,"longComment":true,"comment":"The output of this will be a JSON map of the references for "},{"number":124,"longComment":true,"comment":"all of the files, along with line-by-line comment maps."},{"number":125,"longComment":true,"comment":""},{"number":126,"code":"            referenceParser.parse()"},{"number":127,"code":"                .then((response) => {"},{"number":128,"code":""},{"number":129,"longComment":true,"comment":""},{"number":130,"longComment":true,"comment":"Once parsed, trigger generators. "},{"number":131,"longComment":true,"comment":"These will use the JSON maps created by @ReferenceParser/parse "},{"number":132,"longComment":true,"comment":"and build the output documentation files."},{"number":133,"longComment":true,"comment":""},{"number":134,"code":"                    logger.info(\"Parsing complete, beginning export.\");"},{"number":135,"code":"                    let generatorActions = [];"},{"number":136,"code":""},{"number":137,"comment":" Trigger @HtmlGenerator/generate","code":"                   "},{"number":138,"code":"                    if (_.contains(config.generators, \"html\")) {"},{"number":139,"code":"                        generatorActions.push(new HtmlGenerator(config, logLevel).generate());"},{"number":140,"code":"                    }"},{"number":141,"code":""},{"number":142,"comment":" Trigger @MarkdownGenerator/generate","code":"                   "},{"number":143,"code":"                    if (_.contains(config.generators, \"markdown\")) {"},{"number":144,"code":"                        generatorActions.push(new MarkdownGenerator(config, logLevel).generate());"},{"number":145,"code":"                    }"},{"number":146,"code":""},{"number":147,"code":"                    Q.all(generatorActions)"},{"number":148,"code":"                        .then(() => {"},{"number":149,"comment":" Once all generators are done we can clean up JSON maps.","code":"                           "},{"number":150,"code":"                            if (!config.leaveJSONFiles) {"},{"number":151,"code":"                                logger.info(\"Cleaning up - Removing JSON parse files.\");"},{"number":152,"code":"                                deleteDir(parseLoc);"},{"number":153,"code":"                            }"},{"number":154,"code":"                        });"},{"number":155,"code":"                })"},{"number":156,"code":"                .catch((err: Error) => {"},{"number":157,"comment":" !todo/report-errors An overall strategy is needed to identify and report errors.","code":"                   "},{"number":158,"code":"                    logger.error(err.message + err.stack);"},{"number":159,"code":"                });"},{"number":160,"code":"        });"},{"number":161,"code":"}"},{"number":162,"code":""},{"number":163,"longComment":true,"comment":" !Index/getFiles"},{"number":164,"longComment":true,"comment":"## Get Files from Glob"},{"number":165,"longComment":true,"comment":"This is a simple helper to get a set of files from a glob."},{"number":166,"longComment":true,"comment":""},{"number":167,"code":"function getFilesFromGlob(globString: string): Q.Promise<string[]> {"},{"number":168,"code":"    return Q.Promise<string[]>((resolve, reject) => {"},{"number":169,"code":"        glob(globString, (err, files: string[]) => {"},{"number":170,"code":"            if (err) reject(err);"},{"number":171,"code":"            resolve(files);"},{"number":172,"code":"        });"},{"number":173,"code":"    });"},{"number":174,"code":"}"},{"number":175,"code":""},{"number":176,"longComment":true,"comment":" !Index/deleteDir"},{"number":177,"longComment":true,"comment":"## Delete a directory"},{"number":178,"longComment":true,"comment":"This is a simple helper to recursively delete a directory, and any sub-directories and files it contains."},{"number":179,"longComment":true,"comment":""},{"number":180,"code":"function deleteDir(dirPath) {"},{"number":181,"code":"    let files = [];"},{"number":182,"code":""},{"number":183,"code":"    try { files = readdirSync(dirPath); }"},{"number":184,"code":"    catch (e) { return; }"},{"number":185,"code":""},{"number":186,"code":"    if (files.length > 0) {"},{"number":187,"code":"        for (let i = 0; i < files.length; i++) {"},{"number":188,"code":"            let filePath = dirPath + \"/\" + files[i];"},{"number":189,"code":"            if (statSync(filePath).isFile()) {"},{"number":190,"code":"                unlinkSync(filePath);"},{"number":191,"code":"            } else {"},{"number":192,"code":"                deleteDir(filePath);"},{"number":193,"code":"            }"},{"number":194,"code":"        }"},{"number":195,"code":"    }"},{"number":196,"code":""},{"number":197,"code":"    rmdirSync(dirPath);"},{"number":198,"code":"};"}],"type":"typescript"}